{"docstore/data":{"73e8391f-0d3e-4ab0-b83f-c2bf36921845":{"indexId":"73e8391f-0d3e-4ab0-b83f-c2bf36921845","nodesDict":{"b1a47078-46c7-4082-bc79-f18e76ab6c24":{"id_":"b1a47078-46c7-4082-bc79-f18e76ab6c24","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"NEXT":{"nodeId":"4cf88b14-74f9-48fd-b471-b1a3ba797d38","metadata":{},"hash":"AOnwwgJINbGamCNK12p1Kx/zFaxrvdkqGGwVNnAN6cQ="}},"text":"What I Worked On\r\n\r\nFebruary 2021\r\n\r\nBefore college the two main things I worked on, outside of school, were writing and programming.I didn't write essays.I wrote what beginning writers were supposed to write then, and probably still are: short stories.My stories were awful.They had hardly any plot, just characters with strong feelings, which I imagined made them deep.The first programs I tried writing were on the IBM 1401 that our school district used for what was then called \"data processing.\"This was in 9th grade, so I was 13 or 14.The school district's 1401 happened to be in the basement of our junior high school, and my friend Rich Draves and I got permission to use it.It was like a mini Bond villain's lair down there, with all these alien-looking machines — CPU, disk drives, printer, card reader — sitting up on a raised floor under bright fluorescent lights.The language we used was an early version of Fortran.You had to type programs on punch cards, then stack them in the card reader and press a button to load the program into memory and run it.The result would ordinarily be to print something on the spectacularly loud printer.I was puzzled by the 1401.I couldn't figure out what to do with it.And in retrospect there's not much I could have done with it.The only form of input to programs was data stored on punched cards, and I didn't have any data stored on punched cards.The only other option was to do things that didn't rely on any input, like calculate approximations of pi, but I didn't know enough math to do anything interesting of that type.So I'm not surprised I can't remember any programs I wrote, because they can't have done much.My clearest memory is of the moment I learned it was possible for programs not to terminate, when one of mine didn't.On a machine without time-sharing, this was a social as well as a technical error, as the data center manager's expression made clear.With microcomputers, everything changed.Now you could have a computer sitting right in front of you, on a desk, that could respond to your keystrokes as it was running instead of just churning through a stack of punch cards and then stopping.[1]\r\n\r\nThe first of my friends to get a microcomputer built it himself.It was sold as a kit by Heathkit.I remember vividly how impressed and envious I felt watching him sitting in front of it, typing programs right into the computer.Computers were expensive in those days and it took me years of nagging before I convinced my father to buy one, a TRS-80, in about 1980.The gold standard then was the Apple II, but a TRS-80 was good enough.This was when I really started programming.I wrote simple games, a program to predict how high my model rockets would fly, and a word processor that my father used to write at least one book.There was only room in memory for about 2 pages of text, so he'd write 2 pages at a time and then print them out, but it was a lot better than a typewriter.Though I liked programming, I didn't plan to study it in college.In college I was going to study philosophy, which sounded much more powerful.It seemed, to my naive high school self, to be the study of the ultimate truths, compared to which the things studied in other fields would be mere domain knowledge.What I discovered when I got to college was that the other fields took up so much of the space of ideas that there wasn't much left for these supposed ultimate truths.All that seemed left for philosophy were edge cases that people in other fields felt could safely be ignored.I couldn't have put this into words when I was 18.All I knew at the time was that I kept taking philosophy courses and they kept being boring.So I decided to switch to AI.AI was in the air in the mid 1980s, but there were two things especially that made me want to work on it: a novel by Heinlein called The Moon is a Harsh Mistress, which featured an intelligent computer called Mike, and a PBS documentary that showed Terry Winograd using SHRDLU.I haven't tried rereading The Moon is a Harsh Mistress, so I don't know how well it has aged, but when I read it I was drawn entirely into its world.It seemed only a matter of time before we'd have Mike, and when I saw Winograd using SHRDLU, it seemed like that time would be a few years at most.All you had to do was teach SHRDLU more words.There weren't any classes in AI at Cornell then, not even graduate classes, so I started trying to teach myself.Which meant learning Lisp, since in those days Lisp was regarded as the language of AI.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"KaT36LqUHuP2KitUaK4/LQ2YhqkdrAnm9oN5I3x+R+I="},"4cf88b14-74f9-48fd-b471-b1a3ba797d38":{"id_":"4cf88b14-74f9-48fd-b471-b1a3ba797d38","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"b1a47078-46c7-4082-bc79-f18e76ab6c24","metadata":{},"hash":"KaT36LqUHuP2KitUaK4/LQ2YhqkdrAnm9oN5I3x+R+I="},"NEXT":{"nodeId":"cf2ab648-db5a-45b3-8f86-0da8540766d4","metadata":{},"hash":"IwfB53mpnGPlMafJp2k5EYSspfRmLYJnKkwGKLzTRsc="}},"text":"AI was in the air in the mid 1980s, but there were two things especially that made me want to work on it: a novel by Heinlein called The Moon is a Harsh Mistress, which featured an intelligent computer called Mike, and a PBS documentary that showed Terry Winograd using SHRDLU.I haven't tried rereading The Moon is a Harsh Mistress, so I don't know how well it has aged, but when I read it I was drawn entirely into its world.It seemed only a matter of time before we'd have Mike, and when I saw Winograd using SHRDLU, it seemed like that time would be a few years at most.All you had to do was teach SHRDLU more words.There weren't any classes in AI at Cornell then, not even graduate classes, so I started trying to teach myself.Which meant learning Lisp, since in those days Lisp was regarded as the language of AI.The commonly used programming languages then were pretty primitive, and programmers' ideas correspondingly so.The default language at Cornell was a Pascal-like language called PL/I, and the situation was similar elsewhere.Learning Lisp expanded my concept of a program so fast that it was years before I started to have a sense of where the new limits were.This was more like it; this was what I had expected college to do.It wasn't happening in a class, like it was supposed to, but that was ok.For the next couple years I was on a roll.I knew what I was going to do.For my undergraduate thesis, I reverse-engineered SHRDLU.My God did I love working on that program.It was a pleasing bit of code, but what made it even more exciting was my belief — hard to imagine now, but not unique in 1985 — that it was already climbing the lower slopes of intelligence.I had gotten into a program at Cornell that didn't make you choose a major.You could take whatever classes you liked, and choose whatever you liked to put on your degree.I of course chose \"Artificial Intelligence.\"When I got the actual physical diploma, I was dismayed to find that the quotes had been included, which made them read as scare-quotes.At the time this bothered me, but now it seems amusingly accurate, for reasons I was about to discover.I applied to 3 grad schools: MIT and Yale, which were renowned for AI at the time, and Harvard, which I'd visited because Rich Draves went there, and was also home to Bill Woods, who'd invented the type of parser I used in my SHRDLU clone.Only Harvard accepted me, so that was where I went.I don't remember the moment it happened, or if there even was a specific moment, but during the first year of grad school I realized that AI, as practiced at the time, was a hoax.By which I mean the sort of AI in which a program that's told \"the dog is sitting on the chair\" translates this into some formal representation and adds it to the list of things it knows.What these programs really showed was that there's a subset of natural language that's a formal language.But a very proper subset.It was clear that there was an unbridgeable gap between what they could do and actually understanding natural language.It was not, in fact, simply a matter of teaching SHRDLU more words.That whole way of doing AI, with explicit data structures representing concepts, was not going to work.Its brokenness did, as so often happens, generate a lot of opportunities to write papers about various band-aids that could be applied to it, but it was never going to get us Mike.So I looked around to see what I could salvage from the wreckage of my plans, and there was Lisp.I knew from experience that Lisp was interesting for its own sake and not just for its association with AI, even though that was the main reason people cared about it at the time.So I decided to focus on Lisp.In fact, I decided to write a book about Lisp hacking.It's scary to think how little I knew about Lisp hacking when I started writing that book.But there's nothing like writing a book about something to help you learn it.The book, On Lisp, wasn't published till 1993, but I wrote much of it in grad school.Computer Science is an uneasy alliance between two halves, theory and systems.The theory people prove things, and the systems people build things.I wanted to build things.I had plenty of respect for theory — indeed, a sneaking suspicion that it was the more admirable of the two halves — but building things seemed so much more exciting.The problem with systems work, though, was that it didn't last.Any program you wrote today, no matter how good, would be obsolete in a couple decades at best.People might mention your software in footnotes, but no one would actually use it.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"AOnwwgJINbGamCNK12p1Kx/zFaxrvdkqGGwVNnAN6cQ="},"cf2ab648-db5a-45b3-8f86-0da8540766d4":{"id_":"cf2ab648-db5a-45b3-8f86-0da8540766d4","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"4cf88b14-74f9-48fd-b471-b1a3ba797d38","metadata":{},"hash":"AOnwwgJINbGamCNK12p1Kx/zFaxrvdkqGGwVNnAN6cQ="},"NEXT":{"nodeId":"97aef9b9-401b-46b4-b173-173c42305d3a","metadata":{},"hash":"ZaAgwBrBLvzw6qUFWRvNfX6culT1xLCrlRMUxmOLZaQ="}},"text":"So I decided to focus on Lisp.In fact, I decided to write a book about Lisp hacking.It's scary to think how little I knew about Lisp hacking when I started writing that book.But there's nothing like writing a book about something to help you learn it.The book, On Lisp, wasn't published till 1993, but I wrote much of it in grad school.Computer Science is an uneasy alliance between two halves, theory and systems.The theory people prove things, and the systems people build things.I wanted to build things.I had plenty of respect for theory — indeed, a sneaking suspicion that it was the more admirable of the two halves — but building things seemed so much more exciting.The problem with systems work, though, was that it didn't last.Any program you wrote today, no matter how good, would be obsolete in a couple decades at best.People might mention your software in footnotes, but no one would actually use it.And indeed, it would seem very feeble work.Only people with a sense of the history of the field would even realize that, in its time, it had been good.There were some surplus Xerox Dandelions floating around the computer lab at one point.Anyone who wanted one to play around with could have one.I was briefly tempted, but they were so slow by present standards; what was the point?No one else wanted one either, so off they went.That was what happened to systems work.I wanted not just to build things, but to build things that would last.In this dissatisfied state I went in 1988 to visit Rich Draves at CMU, where he was in grad school.One day I went to visit the Carnegie Institute, where I'd spent a lot of time as a kid.While looking at a painting there I realized something that might seem obvious, but was a big surprise to me.There, right on the wall, was something you could make that would last.Paintings didn't become obsolete.Some of the best ones were hundreds of years old.And moreover this was something you could make a living doing.Not as easily as you could by writing software, of course, but I thought if you were really industrious and lived really cheaply, it had to be possible to make enough to survive.And as an artist you could be truly independent.You wouldn't have a boss, or even need to get research funding.I had always liked looking at paintings.Could I make them?I had no idea.I'd never imagined it was even possible.I knew intellectually that people made art — that it didn't just appear spontaneously — but it was as if the people who made it were a different species.They either lived long ago or were mysterious geniuses doing strange things in profiles in Life magazine.The idea of actually being able to make art, to put that verb before that noun, seemed almost miraculous.That fall I started taking art classes at Harvard.Grad students could take classes in any department, and my advisor, Tom Cheatham, was very easy going.If he even knew about the strange classes I was taking, he never said anything.So now I was in a PhD program in computer science, yet planning to be an artist, yet also genuinely in love with Lisp hacking and working away at On Lisp.In other words, like many a grad student, I was working energetically on multiple projects that were not my thesis.I didn't see a way out of this situation.I didn't want to drop out of grad school, but how else was I going to get out?I remember when my friend Robert Morris got kicked out of Cornell for writing the internet worm of 1988, I was envious that he'd found such a spectacular way to get out of grad school.Then one day in April 1990 a crack appeared in the wall.I ran into professor Cheatham and he asked if I was far enough along to graduate that June.I didn't have a word of my dissertation written, but in what must have been the quickest bit of thinking in my life, I decided to take a shot at writing one in the 5 weeks or so that remained before the deadline, reusing parts of On Lisp where I could, and I was able to respond, with no perceptible delay \"Yes, I think so.I'll give you something to read in a few days.\"I picked applications of continuations as the topic.In retrospect I should have written about macros and embedded languages.There's a whole world there that's barely been explored.But all I wanted was to get out of grad school, and my rapidly written dissertation sufficed, just barely.Meanwhile I was applying to art schools.I applied to two: RISD in the US, and the Accademia di Belli Arti in Florence, which, because it was the oldest art school, I imagined would be good.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"IwfB53mpnGPlMafJp2k5EYSspfRmLYJnKkwGKLzTRsc="},"97aef9b9-401b-46b4-b173-173c42305d3a":{"id_":"97aef9b9-401b-46b4-b173-173c42305d3a","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"cf2ab648-db5a-45b3-8f86-0da8540766d4","metadata":{},"hash":"IwfB53mpnGPlMafJp2k5EYSspfRmLYJnKkwGKLzTRsc="},"NEXT":{"nodeId":"97ddfc7c-6256-4f10-b74b-03dc63b0e681","metadata":{},"hash":"bI+kI674CL1pBc+0uugdTR+QehH3lNL2UBplpRkYCdU="}},"text":"I didn't have a word of my dissertation written, but in what must have been the quickest bit of thinking in my life, I decided to take a shot at writing one in the 5 weeks or so that remained before the deadline, reusing parts of On Lisp where I could, and I was able to respond, with no perceptible delay \"Yes, I think so.I'll give you something to read in a few days.\"I picked applications of continuations as the topic.In retrospect I should have written about macros and embedded languages.There's a whole world there that's barely been explored.But all I wanted was to get out of grad school, and my rapidly written dissertation sufficed, just barely.Meanwhile I was applying to art schools.I applied to two: RISD in the US, and the Accademia di Belli Arti in Florence, which, because it was the oldest art school, I imagined would be good.RISD accepted me, and I never heard back from the Accademia, so off to Providence I went.I'd applied for the BFA program at RISD, which meant in effect that I had to go to college again.This was not as strange as it sounds, because I was only 25, and art schools are full of people of different ages.RISD counted me as a transfer sophomore and said I had to do the foundation that summer.The foundation means the classes that everyone has to take in fundamental subjects like drawing, color, and design.Toward the end of the summer I got a big surprise: a letter from the Accademia, which had been delayed because they'd sent it to Cambridge England instead of Cambridge Massachusetts, inviting me to take the entrance exam in Florence that fall.This was now only weeks away.My nice landlady let me leave my stuff in her attic.I had some money saved from consulting work I'd done in grad school; there was probably enough to last a year if I lived cheaply.Now all I had to do was learn Italian.Only stranieri (foreigners) had to take this entrance exam.In retrospect it may well have been a way of excluding them, because there were so many stranieri attracted by the idea of studying art in Florence that the Italian students would otherwise have been outnumbered.I was in decent shape at painting and drawing from the RISD foundation that summer, but I still don't know how I managed to pass the written exam.I remember that I answered the essay question by writing about Cezanne, and that I cranked up the intellectual level as high as I could to make the most of my limited vocabulary.[2]\r\n\r\nI'm only up to age 25 and already there are such conspicuous patterns.Here I was, yet again about to attend some august institution in the hopes of learning about some prestigious subject, and yet again about to be disappointed.The students and faculty in the painting department at the Accademia were the nicest people you could imagine, but they had long since arrived at an arrangement whereby the students wouldn't require the faculty to teach anything, and in return the faculty wouldn't require the students to learn anything.And at the same time all involved would adhere outwardly to the conventions of a 19th century atelier.We actually had one of those little stoves, fed with kindling, that you see in 19th century studio paintings, and a nude model sitting as close to it as possible without getting burned.Except hardly anyone else painted her besides me.The rest of the students spent their time chatting or occasionally trying to imitate things they'd seen in American art magazines.Our model turned out to live just down the street from me.She made a living from a combination of modelling and making fakes for a local antique dealer.She'd copy an obscure old painting out of a book, and then he'd take the copy and maltreat it to make it look old.[3]\r\n\r\nWhile I was a student at the Accademia I started painting still lives in my bedroom at night.These paintings were tiny, because the room was, and because I painted them on leftover scraps of canvas, which was all I could afford at the time.Painting still lives is different from painting people, because the subject, as its name suggests, can't move.People can't sit for more than about 15 minutes at a time, and when they do they don't sit very still.So the traditional m.o.for painting people is to know how to paint a generic person, which you then modify to match the specific person you're painting.Whereas a still life you can, if you want, copy pixel by pixel from what you're seeing.You don't want to stop there, of course, or you get merely photographic accuracy, and what makes a still life interesting is that it's been through a head.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"ZaAgwBrBLvzw6qUFWRvNfX6culT1xLCrlRMUxmOLZaQ="},"97ddfc7c-6256-4f10-b74b-03dc63b0e681":{"id_":"97ddfc7c-6256-4f10-b74b-03dc63b0e681","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"97aef9b9-401b-46b4-b173-173c42305d3a","metadata":{},"hash":"ZaAgwBrBLvzw6qUFWRvNfX6culT1xLCrlRMUxmOLZaQ="},"NEXT":{"nodeId":"2a777125-4f70-4ec6-9055-8b9e164243cf","metadata":{},"hash":"mdTtvHZwTCceUGbPauYzvQknd3uGCLn48uHPMX/Lx+E="}},"text":"[3]\r\n\r\nWhile I was a student at the Accademia I started painting still lives in my bedroom at night.These paintings were tiny, because the room was, and because I painted them on leftover scraps of canvas, which was all I could afford at the time.Painting still lives is different from painting people, because the subject, as its name suggests, can't move.People can't sit for more than about 15 minutes at a time, and when they do they don't sit very still.So the traditional m.o.for painting people is to know how to paint a generic person, which you then modify to match the specific person you're painting.Whereas a still life you can, if you want, copy pixel by pixel from what you're seeing.You don't want to stop there, of course, or you get merely photographic accuracy, and what makes a still life interesting is that it's been through a head.You want to emphasize the visual cues that tell you, for example, that the reason the color changes suddenly at a certain point is that it's the edge of an object.By subtly emphasizing such things you can make paintings that are more realistic than photographs not just in some metaphorical sense, but in the strict information-theoretic sense.[4]\r\n\r\nI liked painting still lives because I was curious about what I was seeing.In everyday life, we aren't consciously aware of much we're seeing.Most visual perception is handled by low-level processes that merely tell your brain \"that's a water droplet\" without telling you details like where the lightest and darkest points are, or \"that's a bush\" without telling you the shape and position of every leaf.This is a feature of brains, not a bug.In everyday life it would be distracting to notice every leaf on every bush.But when you have to paint something, you have to look more closely, and when you do there's a lot to see.You can still be noticing new things after days of trying to paint something people usually take for granted, just as you can after days of trying to write an essay about something people usually take for granted.This is not the only way to paint.I'm not 100% sure it's even a good way to paint.But it seemed a good enough bet to be worth trying.Our teacher, professor Ulivi, was a nice guy.He could see I worked hard, and gave me a good grade, which he wrote down in a sort of passport each student had.But the Accademia wasn't teaching me anything except Italian, and my money was running out, so at the end of the first year I went back to the US.I wanted to go back to RISD, but I was now broke and RISD was very expensive, so I decided to get a job for a year and then return to RISD the next fall.I got one at a company called Interleaf, which made software for creating documents.You mean like Microsoft Word?Exactly.That was how I learned that low end software tends to eat high end software.But Interleaf still had a few years to live yet.[5]\r\n\r\nInterleaf had done something pretty bold.Inspired by Emacs, they'd added a scripting language, and even made the scripting language a dialect of Lisp.Now they wanted a Lisp hacker to write things in it.This was the closest thing I've had to a normal job, and I hereby apologize to my boss and coworkers, because I was a bad employee.Their Lisp was the thinnest icing on a giant C cake, and since I didn't know C and didn't want to learn it, I never understood most of the software.Plus I was terribly irresponsible.This was back when a programming job meant showing up every day during certain working hours.That seemed unnatural to me, and on this point the rest of the world is coming around to my way of thinking, but at the time it caused a lot of friction.Toward the end of the year I spent much of my time surreptitiously working on On Lisp, which I had by this time gotten a contract to publish.The good part was that I got paid huge amounts of money, especially by art student standards.In Florence, after paying my part of the rent, my budget for everything else had been $7 a day.Now I was getting paid more than 4 times that every hour, even when I was just sitting in a meeting.By living cheaply I not only managed to save enough to go back to RISD, but also paid off my college loans.I learned some useful things at Interleaf, though they were mostly about what not to do.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"bI+kI674CL1pBc+0uugdTR+QehH3lNL2UBplpRkYCdU="},"2a777125-4f70-4ec6-9055-8b9e164243cf":{"id_":"2a777125-4f70-4ec6-9055-8b9e164243cf","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"97ddfc7c-6256-4f10-b74b-03dc63b0e681","metadata":{},"hash":"bI+kI674CL1pBc+0uugdTR+QehH3lNL2UBplpRkYCdU="},"NEXT":{"nodeId":"42c2932d-30fc-43ee-b8c2-f04fd3c40000","metadata":{},"hash":"elKZ/W/XiFU6tP4K7t6H56e0XyaycJazrro46ZfGqmg="}},"text":"This was back when a programming job meant showing up every day during certain working hours.That seemed unnatural to me, and on this point the rest of the world is coming around to my way of thinking, but at the time it caused a lot of friction.Toward the end of the year I spent much of my time surreptitiously working on On Lisp, which I had by this time gotten a contract to publish.The good part was that I got paid huge amounts of money, especially by art student standards.In Florence, after paying my part of the rent, my budget for everything else had been $7 a day.Now I was getting paid more than 4 times that every hour, even when I was just sitting in a meeting.By living cheaply I not only managed to save enough to go back to RISD, but also paid off my college loans.I learned some useful things at Interleaf, though they were mostly about what not to do.I learned that it's better for technology companies to be run by product people than sales people (though sales is a real skill and people who are good at it are really good at it), that it leads to bugs when code is edited by too many people, that cheap office space is no bargain if it's depressing, that planned meetings are inferior to corridor conversations, that big, bureaucratic customers are a dangerous source of money, and that there's not much overlap between conventional office hours and the optimal time for hacking, or conventional offices and the optimal place for it.But the most important thing I learned, and which I used in both Viaweb and Y Combinator, is that the low end eats the high end: that it's good to be the \"entry level\" option, even though that will be less prestigious, because if you're not, someone else will be, and will squash you against the ceiling.Which in turn means that prestige is a danger sign.When I left to go back to RISD the next fall, I arranged to do freelance work for the group that did projects for customers, and this was how I survived for the next several years.When I came back to visit for a project later on, someone told me about a new thing called HTML, which was, as he described it, a derivative of SGML.Markup language enthusiasts were an occupational hazard at Interleaf and I ignored him, but this HTML thing later became a big part of my life.In the fall of 1992 I moved back to Providence to continue at RISD.The foundation had merely been intro stuff, and the Accademia had been a (very civilized) joke.Now I was going to see what real art school was like.But alas it was more like the Accademia than not.Better organized, certainly, and a lot more expensive, but it was now becoming clear that art school did not bear the same relationship to art that medical school bore to medicine.At least not the painting department.The textile department, which my next door neighbor belonged to, seemed to be pretty rigorous.No doubt illustration and architecture were too.But painting was post-rigorous.Painting students were supposed to express themselves, which to the more worldly ones meant to try to cook up some sort of distinctive signature style.A signature style is the visual equivalent of what in show business is known as a \"schtick\": something that immediately identifies the work as yours and no one else's.For example, when you see a painting that looks like a certain kind of cartoon, you know it's by Roy Lichtenstein.So if you see a big painting of this type hanging in the apartment of a hedge fund manager, you know he paid millions of dollars for it.That's not always why artists have a signature style, but it's usually why buyers pay a lot for such work.[6]\r\n\r\nThere were plenty of earnest students too: kids who \"could draw\" in high school, and now had come to what was supposed to be the best art school in the country, to learn to draw even better.They tended to be confused and demoralized by what they found at RISD, but they kept going, because painting was what they did.I was not one of the kids who could draw in high school, but at RISD I was definitely closer to their tribe than the tribe of signature style seekers.I learned a lot in the color class I took at RISD, but otherwise I was basically teaching myself to paint, and I could do that for free.So in 1993 I dropped out.I hung around Providence for a bit, and then my college friend Nancy Parmet did me a big favor.A rent-controlled apartment in a building her mother owned in New York was becoming vacant.Did I want it?It wasn't much more than my current place, and New York was supposed to be where the artists were.So yes, I wanted it!","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"mdTtvHZwTCceUGbPauYzvQknd3uGCLn48uHPMX/Lx+E="},"42c2932d-30fc-43ee-b8c2-f04fd3c40000":{"id_":"42c2932d-30fc-43ee-b8c2-f04fd3c40000","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"2a777125-4f70-4ec6-9055-8b9e164243cf","metadata":{},"hash":"mdTtvHZwTCceUGbPauYzvQknd3uGCLn48uHPMX/Lx+E="},"NEXT":{"nodeId":"f59f3a34-0fb2-4154-b84e-feac87dc999e","metadata":{},"hash":"cah4Q29uegd63KTJTLfVYXpLu/pO4TTAI+CjeM4t5Fc="}},"text":"They tended to be confused and demoralized by what they found at RISD, but they kept going, because painting was what they did.I was not one of the kids who could draw in high school, but at RISD I was definitely closer to their tribe than the tribe of signature style seekers.I learned a lot in the color class I took at RISD, but otherwise I was basically teaching myself to paint, and I could do that for free.So in 1993 I dropped out.I hung around Providence for a bit, and then my college friend Nancy Parmet did me a big favor.A rent-controlled apartment in a building her mother owned in New York was becoming vacant.Did I want it?It wasn't much more than my current place, and New York was supposed to be where the artists were.So yes, I wanted it![7]\r\n\r\nAsterix comics begin by zooming in on a tiny corner of Roman Gaul that turns out not to be controlled by the Romans.You can do something similar on a map of New York City: if you zoom in on the Upper East Side, there's a tiny corner that's not rich, or at least wasn't in 1993.It's called Yorkville, and that was my new home.Now I was a New York artist — in the strictly technical sense of making paintings and living in New York.I was nervous about money, because I could sense that Interleaf was on the way down.Freelance Lisp hacking work was very rare, and I didn't want to have to program in another language, which in those days would have meant C++ if I was lucky.So with my unerring nose for financial opportunity, I decided to write another book on Lisp.This would be a popular book, the sort of book that could be used as a textbook.I imagined myself living frugally off the royalties and spending all my time painting.(The painting on the cover of this book, ANSI Common Lisp, is one that I painted around this time.)The best thing about New York for me was the presence of Idelle and Julian Weber.Idelle Weber was a painter, one of the early photorealists, and I'd taken her painting class at Harvard.I've never known a teacher more beloved by her students.Large numbers of former students kept in touch with her, including me.After I moved to New York I became her de facto studio assistant.She liked to paint on big, square canvases, 4 to 5 feet on a side.One day in late 1994 as I was stretching one of these monsters there was something on the radio about a famous fund manager.He wasn't that much older than me, and was super rich.The thought suddenly occurred to me: why don't I become rich?Then I'll be able to work on whatever I want.Meanwhile I'd been hearing more and more about this new thing called the World Wide Web.Robert Morris showed it to me when I visited him in Cambridge, where he was now in grad school at Harvard.It seemed to me that the web would be a big deal.I'd seen what graphical user interfaces had done for the popularity of microcomputers.It seemed like the web would do the same for the internet.If I wanted to get rich, here was the next train leaving the station.I was right about that part.What I got wrong was the idea.I decided we should start a company to put art galleries online.I can't honestly say, after reading so many Y Combinator applications, that this was the worst startup idea ever, but it was up there.Art galleries didn't want to be online, and still don't, not the fancy ones.That's not how they sell.I wrote some software to generate web sites for galleries, and Robert wrote some to resize images and set up an http server to serve the pages.Then we tried to sign up galleries.To call this a difficult sale would be an understatement.It was difficult to give away.A few galleries let us make sites for them for free, but none paid us.Then some online stores started to appear, and I realized that except for the order buttons they were identical to the sites we'd been generating for galleries.This impressive-sounding thing called an \"internet storefront\" was something we already knew how to build.So in the summer of 1995, after I submitted the camera-ready copy of ANSI Common Lisp to the publishers, we started trying to write software to build online stores.At first this was going to be normal desktop software, which in those days meant Windows software.That was an alarming prospect, because neither of us knew how to write Windows software or wanted to learn.We lived in the Unix world.But we decided we'd at least try writing a prototype store builder on Unix.Robert wrote a shopping cart, and I wrote a new site generator for stores — in Lisp, of course.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"elKZ/W/XiFU6tP4K7t6H56e0XyaycJazrro46ZfGqmg="},"f59f3a34-0fb2-4154-b84e-feac87dc999e":{"id_":"f59f3a34-0fb2-4154-b84e-feac87dc999e","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"42c2932d-30fc-43ee-b8c2-f04fd3c40000","metadata":{},"hash":"elKZ/W/XiFU6tP4K7t6H56e0XyaycJazrro46ZfGqmg="},"NEXT":{"nodeId":"729e9e6a-1c91-4fa1-9e65-14bc08b3a9e7","metadata":{},"hash":"olBc74GBwqwKNUzY0lzehZSBbXDucl5a7hWVI39xGDA="}},"text":"It was difficult to give away.A few galleries let us make sites for them for free, but none paid us.Then some online stores started to appear, and I realized that except for the order buttons they were identical to the sites we'd been generating for galleries.This impressive-sounding thing called an \"internet storefront\" was something we already knew how to build.So in the summer of 1995, after I submitted the camera-ready copy of ANSI Common Lisp to the publishers, we started trying to write software to build online stores.At first this was going to be normal desktop software, which in those days meant Windows software.That was an alarming prospect, because neither of us knew how to write Windows software or wanted to learn.We lived in the Unix world.But we decided we'd at least try writing a prototype store builder on Unix.Robert wrote a shopping cart, and I wrote a new site generator for stores — in Lisp, of course.We were working out of Robert's apartment in Cambridge.His roommate was away for big chunks of time, during which I got to sleep in his room.For some reason there was no bed frame or sheets, just a mattress on the floor.One morning as I was lying on this mattress I had an idea that made me sit up like a capital L.What if we ran the software on the server, and let users control it by clicking on links?Then we'd never have to write anything to run on users' computers.We could generate the sites on the same server we'd serve them from.Users wouldn't need anything more than a browser.This kind of software, known as a web app, is common now, but at the time it wasn't clear that it was even possible.To find out, we decided to try making a version of our store builder that you could control through the browser.A couple days later, on August 12, we had one that worked.The UI was horrible, but it proved you could build a whole store through the browser, without any client software or typing anything into the command line on the server.Now we felt like we were really onto something.I had visions of a whole new generation of software working this way.You wouldn't need versions, or ports, or any of that crap.At Interleaf there had been a whole group called Release Engineering that seemed to be at least as big as the group that actually wrote the software.Now you could just update the software right on the server.We started a new company we called Viaweb, after the fact that our software worked via the web, and we got $10,000 in seed funding from Idelle's husband Julian.In return for that and doing the initial legal work and giving us business advice, we gave him 10% of the company.Ten years later this deal became the model for Y Combinator's.We knew founders needed something like this, because we'd needed it ourselves.At this stage I had a negative net worth, because the thousand dollars or so I had in the bank was more than counterbalanced by what I owed the government in taxes.(Had I diligently set aside the proper proportion of the money I'd made consulting for Interleaf?No, I had not.)So although Robert had his graduate student stipend, I needed that seed funding to live on.We originally hoped to launch in September, but we got more ambitious about the software as we worked on it.Eventually we managed to build a WYSIWYG site builder, in the sense that as you were creating pages, they looked exactly like the static ones that would be generated later, except that instead of leading to static pages, the links all referred to closures stored in a hash table on the server.It helped to have studied art, because the main goal of an online store builder is to make users look legit, and the key to looking legit is high production values.If you get page layouts and fonts and colors right, you can make a guy running a store out of his bedroom look more legit than a big company.(If you're curious why my site looks so old-fashioned, it's because it's still made with this software.It may look clunky today, but in 1996 it was the last word in slick.)In September, Robert rebelled.\"We've been working on this for a month,\" he said, \"and it's still not done.\"This is funny in retrospect, because he would still be working on it almost 3 years later.But I decided it might be prudent to recruit more programmers, and I asked Robert who else in grad school with him was really good.He recommended Trevor Blackwell, which surprised me at first, because at that point I knew Trevor mainly for his plan to reduce everything in his life to a stack of notecards, which he carried around with him.But Rtm was right, as usual.Trevor turned out to be a frighteningly effective hacker.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"cah4Q29uegd63KTJTLfVYXpLu/pO4TTAI+CjeM4t5Fc="},"729e9e6a-1c91-4fa1-9e65-14bc08b3a9e7":{"id_":"729e9e6a-1c91-4fa1-9e65-14bc08b3a9e7","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"f59f3a34-0fb2-4154-b84e-feac87dc999e","metadata":{},"hash":"cah4Q29uegd63KTJTLfVYXpLu/pO4TTAI+CjeM4t5Fc="},"NEXT":{"nodeId":"be6e8058-1797-4de4-a65e-749200f14707","metadata":{},"hash":"w7MFbit2gBtMyRfiV5esG1GNHnamf5qj0PBEQ7A90v4="}},"text":"(If you're curious why my site looks so old-fashioned, it's because it's still made with this software.It may look clunky today, but in 1996 it was the last word in slick.)In September, Robert rebelled.\"We've been working on this for a month,\" he said, \"and it's still not done.\"This is funny in retrospect, because he would still be working on it almost 3 years later.But I decided it might be prudent to recruit more programmers, and I asked Robert who else in grad school with him was really good.He recommended Trevor Blackwell, which surprised me at first, because at that point I knew Trevor mainly for his plan to reduce everything in his life to a stack of notecards, which he carried around with him.But Rtm was right, as usual.Trevor turned out to be a frighteningly effective hacker.It was a lot of fun working with Robert and Trevor.They're the two most independent-minded people I know, and in completely different ways.If you could see inside Rtm's brain it would look like a colonial New England church, and if you could see inside Trevor's it would look like the worst excesses of Austrian Rococo.We opened for business, with 6 stores, in January 1996.It was just as well we waited a few months, because although we worried we were late, we were actually almost fatally early.There was a lot of talk in the press then about ecommerce, but not many people actually wanted online stores.[8]\r\n\r\nThere were three main parts to the software: the editor, which people used to build sites and which I wrote, the shopping cart, which Robert wrote, and the manager, which kept track of orders and statistics, and which Trevor wrote.In its time, the editor was one of the best general-purpose site builders.I kept the code tight and didn't have to integrate with any other software except Robert's and Trevor's, so it was quite fun to work on.If all I'd had to do was work on this software, the next 3 years would have been the easiest of my life.Unfortunately I had to do a lot more, all of it stuff I was worse at than programming, and the next 3 years were instead the most stressful.There were a lot of startups making ecommerce software in the second half of the 90s.We were determined to be the Microsoft Word, not the Interleaf.Which meant being easy to use and inexpensive.It was lucky for us that we were poor, because that caused us to make Viaweb even more inexpensive than we realized.We charged $100 a month for a small store and $300 a month for a big one.This low price was a big attraction, and a constant thorn in the sides of competitors, but it wasn't because of some clever insight that we set the price low.We had no idea what businesses paid for things.$300 a month seemed like a lot of money to us.We did a lot of things right by accident like that.For example, we did what's now called \"doing things that don't scale,\" although at the time we would have described it as \"being so lame that we're driven to the most desperate measures to get users.\"The most common of which was building stores for them.This seemed particularly humiliating, since the whole raison d'etre of our software was that people could use it to make their own stores.But anything to get users.We learned a lot more about retail than we wanted to know.For example, that if you could only have a small image of a man's shirt (and all images were small then by present standards), it was better to have a closeup of the collar than a picture of the whole shirt.The reason I remember learning this was that it meant I had to rescan about 30 images of men's shirts.My first set of scans were so beautiful too.Though this felt wrong, it was exactly the right thing to be doing.Building stores for users taught us about retail, and about how it felt to use our software.I was initially both mystified and repelled by \"business\" and thought we needed a \"business person\" to be in charge of it, but once we started to get users, I was converted, in much the same way I was converted to fatherhood once I had kids.Whatever users wanted, I was all theirs.Maybe one day we'd have so many users that I couldn't scan their images for them, but in the meantime there was nothing more important to do.Another thing I didn't get at the time is that growth rate is the ultimate test of a startup.Our growth rate was fine.We had about 70 stores at the end of 1996 and about 500 at the end of 1997.I mistakenly thought the thing that mattered was the absolute number of users.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"olBc74GBwqwKNUzY0lzehZSBbXDucl5a7hWVI39xGDA="},"be6e8058-1797-4de4-a65e-749200f14707":{"id_":"be6e8058-1797-4de4-a65e-749200f14707","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"729e9e6a-1c91-4fa1-9e65-14bc08b3a9e7","metadata":{},"hash":"olBc74GBwqwKNUzY0lzehZSBbXDucl5a7hWVI39xGDA="},"NEXT":{"nodeId":"99d4c31a-0624-4c6f-a89a-4df910ef1e0c","metadata":{},"hash":"4cKE7pQNZGIsQAqvhSBj3OSy//fFPFMJC6+gPjGj0Kc="}},"text":"Though this felt wrong, it was exactly the right thing to be doing.Building stores for users taught us about retail, and about how it felt to use our software.I was initially both mystified and repelled by \"business\" and thought we needed a \"business person\" to be in charge of it, but once we started to get users, I was converted, in much the same way I was converted to fatherhood once I had kids.Whatever users wanted, I was all theirs.Maybe one day we'd have so many users that I couldn't scan their images for them, but in the meantime there was nothing more important to do.Another thing I didn't get at the time is that growth rate is the ultimate test of a startup.Our growth rate was fine.We had about 70 stores at the end of 1996 and about 500 at the end of 1997.I mistakenly thought the thing that mattered was the absolute number of users.And that is the thing that matters in the sense that that's how much money you're making, and if you're not making enough, you might go out of business.But in the long term the growth rate takes care of the absolute number.If we'd been a startup I was advising at Y Combinator, I would have said: Stop being so stressed out, because you're doing fine.You're growing 7x a year.Just don't hire too many more people and you'll soon be profitable, and then you'll control your own destiny.Alas I hired lots more people, partly because our investors wanted me to, and partly because that's what startups did during the Internet Bubble.A company with just a handful of employees would have seemed amateurish.So we didn't reach breakeven until about when Yahoo bought us in the summer of 1998.Which in turn meant we were at the mercy of investors for the entire life of the company.And since both we and our investors were noobs at startups, the result was a mess even by startup standards.It was a huge relief when Yahoo bought us.In principle our Viaweb stock was valuable.It was a share in a business that was profitable and growing rapidly.But it didn't feel very valuable to me; I had no idea how to value a business, but I was all too keenly aware of the near-death experiences we seemed to have every few months.Nor had I changed my grad student lifestyle significantly since we started.So when Yahoo bought us it felt like going from rags to riches.Since we were going to California, I bought a car, a yellow 1998 VW GTI.I remember thinking that its leather seats alone were by far the most luxurious thing I owned.The next year, from the summer of 1998 to the summer of 1999, must have been the least productive of my life.I didn't realize it at the time, but I was worn out from the effort and stress of running Viaweb.For a while after I got to California I tried to continue my usual m.o.of programming till 3 in the morning, but fatigue combined with Yahoo's prematurely aged culture and grim cube farm in Santa Clara gradually dragged me down.After a few months it felt disconcertingly like working at Interleaf.Yahoo had given us a lot of options when they bought us.At the time I thought Yahoo was so overvalued that they'd never be worth anything, but to my astonishment the stock went up 5x in the next year.I hung on till the first chunk of options vested, then in the summer of 1999 I left.It had been so long since I'd painted anything that I'd half forgotten why I was doing this.My brain had been entirely full of software and men's shirts for 4 years.But I had done this to get rich so I could paint, I reminded myself, and now I was rich, so I should go paint.When I said I was leaving, my boss at Yahoo had a long conversation with me about my plans.I told him all about the kinds of pictures I wanted to paint.At the time I was touched that he took such an interest in me.Now I realize it was because he thought I was lying.My options at that point were worth about $2 million a month.If I was leaving that kind of money on the table, it could only be to go and start some new startup, and if I did, I might take people with me.This was the height of the Internet Bubble, and Yahoo was ground zero of it.My boss was at that moment a billionaire.Leaving then to start a new startup must have seemed to him an insanely, and yet also plausibly, ambitious plan.But I really was quitting to paint, and I started immediately.There was no time to lose.I'd already burned 4 years getting rich.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"w7MFbit2gBtMyRfiV5esG1GNHnamf5qj0PBEQ7A90v4="},"99d4c31a-0624-4c6f-a89a-4df910ef1e0c":{"id_":"99d4c31a-0624-4c6f-a89a-4df910ef1e0c","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"be6e8058-1797-4de4-a65e-749200f14707","metadata":{},"hash":"w7MFbit2gBtMyRfiV5esG1GNHnamf5qj0PBEQ7A90v4="},"NEXT":{"nodeId":"4c0dc0b7-0064-41cf-b330-77f55ee85a1d","metadata":{},"hash":"Mz3DOzgTDehSGeotq6j0QxY1KyfxqpaPbZkMMDK59AE="}},"text":"When I said I was leaving, my boss at Yahoo had a long conversation with me about my plans.I told him all about the kinds of pictures I wanted to paint.At the time I was touched that he took such an interest in me.Now I realize it was because he thought I was lying.My options at that point were worth about $2 million a month.If I was leaving that kind of money on the table, it could only be to go and start some new startup, and if I did, I might take people with me.This was the height of the Internet Bubble, and Yahoo was ground zero of it.My boss was at that moment a billionaire.Leaving then to start a new startup must have seemed to him an insanely, and yet also plausibly, ambitious plan.But I really was quitting to paint, and I started immediately.There was no time to lose.I'd already burned 4 years getting rich.Now when I talk to founders who are leaving after selling their companies, my advice is always the same: take a vacation.That's what I should have done, just gone off somewhere and done nothing for a month or two, but the idea never occurred to me.So I tried to paint, but I just didn't seem to have any energy or ambition.Part of the problem was that I didn't know many people in California.I'd compounded this problem by buying a house up in the Santa Cruz Mountains, with a beautiful view but miles from anywhere.I stuck it out for a few more months, then in desperation I went back to New York, where unless you understand about rent control you'll be surprised to hear I still had my apartment, sealed up like a tomb of my old life.Idelle was in New York at least, and there were other people trying to paint there, even though I didn't know any of them.When I got back to New York I resumed my old life, except now I was rich.It was as weird as it sounds.I resumed all my old patterns, except now there were doors where there hadn't been.Now when I was tired of walking, all I had to do was raise my hand, and (unless it was raining) a taxi would stop to pick me up.Now when I walked past charming little restaurants I could go in and order lunch.It was exciting for a while.Painting started to go better.I experimented with a new kind of still life where I'd paint one painting in the old way, then photograph it and print it, blown up, on canvas, and then use that as the underpainting for a second still life, painted from the same objects (which hopefully hadn't rotted yet).Meanwhile I looked for an apartment to buy.Now I could actually choose what neighborhood to live in.Where, I asked myself and various real estate agents, is the Cambridge of New York?Aided by occasional visits to actual Cambridge, I gradually realized there wasn't one.Huh.Around this time, in the spring of 2000, I had an idea.It was clear from our experience with Viaweb that web apps were the future.Why not build a web app for making web apps?Why not let people edit code on our server through the browser, and then host the resulting applications for them?[9] You could run all sorts of services on the servers that these applications could use just by making an API call: making and receiving phone calls, manipulating images, taking credit card payments, etc.\r\n\r\nI got so excited about this idea that I couldn't think about anything else.It seemed obvious that this was the future.I didn't particularly want to start another company, but it was clear that this idea would have to be embodied as one, so I decided to move to Cambridge and start it.I hoped to lure Robert into working on it with me, but there I ran into a hitch.Robert was now a postdoc at MIT, and though he'd made a lot of money the last time I'd lured him into working on one of my schemes, it had also been a huge time sink.So while he agreed that it sounded like a plausible idea, he firmly refused to work on it.Hmph.Well, I'd do it myself then.I recruited Dan Giffin, who had worked for Viaweb, and two undergrads who wanted summer jobs, and we got to work trying to build what it's now clear is about twenty companies and several open source projects worth of software.The language for defining applications would of course be a dialect of Lisp.But I wasn't so naive as to assume I could spring an overt Lisp on a general audience; we'd hide the parentheses, like Dylan did.By then there was a name for the kind of company Viaweb was, an \"application service provider,\" or ASP.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"4cKE7pQNZGIsQAqvhSBj3OSy//fFPFMJC6+gPjGj0Kc="},"4c0dc0b7-0064-41cf-b330-77f55ee85a1d":{"id_":"4c0dc0b7-0064-41cf-b330-77f55ee85a1d","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"99d4c31a-0624-4c6f-a89a-4df910ef1e0c","metadata":{},"hash":"4cKE7pQNZGIsQAqvhSBj3OSy//fFPFMJC6+gPjGj0Kc="},"NEXT":{"nodeId":"16daeb97-f4b1-4e65-9441-01a011a99cc3","metadata":{},"hash":"FS29mrq5rn0RQyh1Vt7w22vd9HUFFCd5h27TWtcgKr4="}},"text":"Robert was now a postdoc at MIT, and though he'd made a lot of money the last time I'd lured him into working on one of my schemes, it had also been a huge time sink.So while he agreed that it sounded like a plausible idea, he firmly refused to work on it.Hmph.Well, I'd do it myself then.I recruited Dan Giffin, who had worked for Viaweb, and two undergrads who wanted summer jobs, and we got to work trying to build what it's now clear is about twenty companies and several open source projects worth of software.The language for defining applications would of course be a dialect of Lisp.But I wasn't so naive as to assume I could spring an overt Lisp on a general audience; we'd hide the parentheses, like Dylan did.By then there was a name for the kind of company Viaweb was, an \"application service provider,\" or ASP.This name didn't last long before it was replaced by \"software as a service,\" but it was current for long enough that I named this new company after it: it was going to be called Aspra.I started working on the application builder, Dan worked on network infrastructure, and the two undergrads worked on the first two services (images and phone calls).But about halfway through the summer I realized I really didn't want to run a company — especially not a big one, which it was looking like this would have to be.I'd only started Viaweb because I needed the money.Now that I didn't need money anymore, why was I doing this?If this vision had to be realized as a company, then screw the vision.I'd build a subset that could be done as an open source project.Much to my surprise, the time I spent working on this stuff was not wasted after all.After we started Y Combinator, I would often encounter startups working on parts of this new architecture, and it was very useful to have spent so much time thinking about it and even trying to write some of it.The subset I would build as an open source project was the new Lisp, whose parentheses I now wouldn't even have to hide.A lot of Lisp hackers dream of building a new Lisp, partly because one of the distinctive features of the language is that it has dialects, and partly, I think, because we have in our minds a Platonic form of Lisp that all existing dialects fall short of.I certainly did.So at the end of the summer Dan and I switched to working on this new dialect of Lisp, which I called Arc, in a house I bought in Cambridge.The following spring, lightning struck.I was invited to give a talk at a Lisp conference, so I gave one about how we'd used Lisp at Viaweb.Afterward I put a postscript file of this talk online, on paulgraham.com, which I'd created years before using Viaweb but had never used for anything.In one day it got 30,000 page views.What on earth had happened?The referring urls showed that someone had posted it on Slashdot.[10]\r\n\r\nWow, I thought, there's an audience.If I write something and put it on the web, anyone can read it.That may seem obvious now, but it was surprising then.In the print era there was a narrow channel to readers, guarded by fierce monsters known as editors.The only way to get an audience for anything you wrote was to get it published as a book, or in a newspaper or magazine.Now anyone could publish anything.This had been possible in principle since 1993, but not many people had realized it yet.I had been intimately involved with building the infrastructure of the web for most of that time, and a writer as well, and it had taken me 8 years to realize it.Even then it took me several years to understand the implications.It meant there would be a whole new generation of essays.[11]\r\n\r\nIn the print era, the channel for publishing essays had been vanishingly small.Except for a few officially anointed thinkers who went to the right parties in New York, the only people allowed to publish essays were specialists writing about their specialties.There were so many essays that had never been written, because there had been no way to publish them.Now they could be, and I was going to write them.[12]\r\n\r\nI've worked on several different things, but to the extent there was a turning point where I figured out what to work on, it was when I started publishing essays online.From then on I knew that whatever else I did, I'd always write essays too.I knew that online essays would be a marginal medium at first.Socially they'd seem more like rants posted by nutjobs on their GeoCities sites than the genteel and beautifully typeset compositions published in The New Yorker.But by this point I knew enough to find that encouraging instead of discouraging.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"Mz3DOzgTDehSGeotq6j0QxY1KyfxqpaPbZkMMDK59AE="},"16daeb97-f4b1-4e65-9441-01a011a99cc3":{"id_":"16daeb97-f4b1-4e65-9441-01a011a99cc3","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"4c0dc0b7-0064-41cf-b330-77f55ee85a1d","metadata":{},"hash":"Mz3DOzgTDehSGeotq6j0QxY1KyfxqpaPbZkMMDK59AE="},"NEXT":{"nodeId":"d3c4a6be-e7ab-47c0-a9ec-d792c350f73f","metadata":{},"hash":"hjen882TSfV/Vdh7aGtZ3qLgta5e5meX9l/+eJCqBG4="}},"text":"Except for a few officially anointed thinkers who went to the right parties in New York, the only people allowed to publish essays were specialists writing about their specialties.There were so many essays that had never been written, because there had been no way to publish them.Now they could be, and I was going to write them.[12]\r\n\r\nI've worked on several different things, but to the extent there was a turning point where I figured out what to work on, it was when I started publishing essays online.From then on I knew that whatever else I did, I'd always write essays too.I knew that online essays would be a marginal medium at first.Socially they'd seem more like rants posted by nutjobs on their GeoCities sites than the genteel and beautifully typeset compositions published in The New Yorker.But by this point I knew enough to find that encouraging instead of discouraging.One of the most conspicuous patterns I've noticed in my life is how well it has worked, for me at least, to work on things that weren't prestigious.Still life has always been the least prestigious form of painting.Viaweb and Y Combinator both seemed lame when we started them.I still get the glassy eye from strangers when they ask what I'm writing, and I explain that it's an essay I'm going to publish on my web site.Even Lisp, though prestigious intellectually in something like the way Latin is, also seems about as hip.It's not that unprestigious types of work are good per se.But when you find yourself drawn to some kind of work despite its current lack of prestige, it's a sign both that there's something real to be discovered there, and that you have the right kind of motives.Impure motives are a big danger for the ambitious.If anything is going to lead you astray, it will be the desire to impress people.So while working on things that aren't prestigious doesn't guarantee you're on the right track, it at least guarantees you're not on the most common type of wrong one.Over the next several years I wrote lots of essays about all kinds of different topics.O'Reilly reprinted a collection of them as a book, called Hackers & Painters after one of the essays in it.I also worked on spam filters, and did some more painting.I used to have dinners for a group of friends every thursday night, which taught me how to cook for groups.And I bought another building in Cambridge, a former candy factory (and later, twas said, porn studio), to use as an office.One night in October 2003 there was a big party at my house.It was a clever idea of my friend Maria Daniels, who was one of the thursday diners.Three separate hosts would all invite their friends to one party.So for every guest, two thirds of the other guests would be people they didn't know but would probably like.One of the guests was someone I didn't know but would turn out to like a lot: a woman called Jessica Livingston.A couple days later I asked her out.Jessica was in charge of marketing at a Boston investment bank.This bank thought it understood startups, but over the next year, as she met friends of mine from the startup world, she was surprised how different reality was.And how colorful their stories were.So she decided to compile a book of interviews with startup founders.When the bank had financial problems and she had to fire half her staff, she started looking for a new job.In early 2005 she interviewed for a marketing job at a Boston VC firm.It took them weeks to make up their minds, and during this time I started telling her about all the things that needed to be fixed about venture capital.They should make a larger number of smaller investments instead of a handful of giant ones, they should be funding younger, more technical founders instead of MBAs, they should let the founders remain as CEO, and so on.One of my tricks for writing essays had always been to give talks.The prospect of having to stand up in front of a group of people and tell them something that won't waste their time is a great spur to the imagination.When the Harvard Computer Society, the undergrad computer club, asked me to give a talk, I decided I would tell them how to start a startup.Maybe they'd be able to avoid the worst of the mistakes we'd made.So I gave this talk, in the course of which I told them that the best sources of seed funding were successful startup founders, because then they'd be sources of advice too.Whereupon it seemed they were all looking expectantly at me.Horrified at the prospect of having my inbox flooded by business plans (if I'd only known), I blurted out \"But not me!\"and went on with the talk.But afterward it occurred to me that I should really stop procrastinating about angel investing.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"FS29mrq5rn0RQyh1Vt7w22vd9HUFFCd5h27TWtcgKr4="},"d3c4a6be-e7ab-47c0-a9ec-d792c350f73f":{"id_":"d3c4a6be-e7ab-47c0-a9ec-d792c350f73f","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"16daeb97-f4b1-4e65-9441-01a011a99cc3","metadata":{},"hash":"FS29mrq5rn0RQyh1Vt7w22vd9HUFFCd5h27TWtcgKr4="},"NEXT":{"nodeId":"58dc8069-d2b9-4b0a-83f8-9c94190a5c2b","metadata":{},"hash":"wyDtZYvDoywOExbQGeo79g+2RFIH313kniWJ4WmXzrg="}},"text":"One of my tricks for writing essays had always been to give talks.The prospect of having to stand up in front of a group of people and tell them something that won't waste their time is a great spur to the imagination.When the Harvard Computer Society, the undergrad computer club, asked me to give a talk, I decided I would tell them how to start a startup.Maybe they'd be able to avoid the worst of the mistakes we'd made.So I gave this talk, in the course of which I told them that the best sources of seed funding were successful startup founders, because then they'd be sources of advice too.Whereupon it seemed they were all looking expectantly at me.Horrified at the prospect of having my inbox flooded by business plans (if I'd only known), I blurted out \"But not me!\"and went on with the talk.But afterward it occurred to me that I should really stop procrastinating about angel investing.I'd been meaning to since Yahoo bought us, and now it was 7 years later and I still hadn't done one angel investment.Meanwhile I had been scheming with Robert and Trevor about projects we could work on together.I missed working with them, and it seemed like there had to be something we could collaborate on.As Jessica and I were walking home from dinner on March 11, at the corner of Garden and Walker streets, these three threads converged.Screw the VCs who were taking so long to make up their minds.We'd start our own investment firm and actually implement the ideas we'd been talking about.I'd fund it, and Jessica could quit her job and work for it, and we'd get Robert and Trevor as partners too.[13]\r\n\r\nOnce again, ignorance worked in our favor.We had no idea how to be angel investors, and in Boston in 2005 there were no Ron Conways to learn from.So we just made what seemed like the obvious choices, and some of the things we did turned out to be novel.There are multiple components to Y Combinator, and we didn't figure them all out at once.The part we got first was to be an angel firm.In those days, those two words didn't go together.There were VC firms, which were organized companies with people whose job it was to make investments, but they only did big, million dollar investments.And there were angels, who did smaller investments, but these were individuals who were usually focused on other things and made investments on the side.And neither of them helped founders enough in the beginning.We knew how helpless founders were in some respects, because we remembered how helpless we'd been.For example, one thing Julian had done for us that seemed to us like magic was to get us set up as a company.We were fine writing fairly difficult software, but actually getting incorporated, with bylaws and stock and all that stuff, how on earth did you do that?Our plan was not only to make seed investments, but to do for startups everything Julian had done for us.YC was not organized as a fund.It was cheap enough to run that we funded it with our own money.That went right by 99% of readers, but professional investors are thinking \"Wow, that means they got all the returns.\"But once again, this was not due to any particular insight on our part.We didn't know how VC firms were organized.It never occurred to us to try to raise a fund, and if it had, we wouldn't have known where to start.[14]\r\n\r\nThe most distinctive thing about YC is the batch model: to fund a bunch of startups all at once, twice a year, and then to spend three months focusing intensively on trying to help them.That part we discovered by accident, not merely implicitly but explicitly due to our ignorance about investing.We needed to get experience as investors.What better way, we thought, than to fund a whole bunch of startups at once?We knew undergrads got temporary jobs at tech companies during the summer.Why not organize a summer program where they'd start startups instead?We wouldn't feel guilty for being in a sense fake investors, because they would in a similar sense be fake founders.So while we probably wouldn't make much money out of it, we'd at least get to practice being investors on them, and they for their part would probably have a more interesting summer than they would working at Microsoft.We'd use the building I owned in Cambridge as our headquarters.We'd all have dinner there once a week — on tuesdays, since I was already cooking for the thursday diners on thursdays — and after dinner we'd bring in experts on startups to give talks.We knew undergrads were deciding then about summer jobs, so in a matter of days we cooked up something we called the Summer Founders Program, and I posted an announcement on my site, inviting undergrads to apply.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"hjen882TSfV/Vdh7aGtZ3qLgta5e5meX9l/+eJCqBG4="},"58dc8069-d2b9-4b0a-83f8-9c94190a5c2b":{"id_":"58dc8069-d2b9-4b0a-83f8-9c94190a5c2b","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"d3c4a6be-e7ab-47c0-a9ec-d792c350f73f","metadata":{},"hash":"hjen882TSfV/Vdh7aGtZ3qLgta5e5meX9l/+eJCqBG4="},"NEXT":{"nodeId":"9bba799f-bc1b-496c-bcd6-8e11dfa23bc9","metadata":{},"hash":"9pPCfqxfIUMlBhijLLeFZgRPeiuGA8itAXb28pdHF6c="}},"text":"We knew undergrads got temporary jobs at tech companies during the summer.Why not organize a summer program where they'd start startups instead?We wouldn't feel guilty for being in a sense fake investors, because they would in a similar sense be fake founders.So while we probably wouldn't make much money out of it, we'd at least get to practice being investors on them, and they for their part would probably have a more interesting summer than they would working at Microsoft.We'd use the building I owned in Cambridge as our headquarters.We'd all have dinner there once a week — on tuesdays, since I was already cooking for the thursday diners on thursdays — and after dinner we'd bring in experts on startups to give talks.We knew undergrads were deciding then about summer jobs, so in a matter of days we cooked up something we called the Summer Founders Program, and I posted an announcement on my site, inviting undergrads to apply.I had never imagined that writing essays would be a way to get \"deal flow,\" as investors call it, but it turned out to be the perfect source.[15] We got 225 applications for the Summer Founders Program, and we were surprised to find that a lot of them were from people who'd already graduated, or were about to that spring.Already this SFP thing was starting to feel more serious than we'd intended.We invited about 20 of the 225 groups to interview in person, and from those we picked 8 to fund.They were an impressive group.That first batch included reddit, Justin Kan and Emmett Shear, who went on to found Twitch, Aaron Swartz, who had already helped write the RSS spec and would a few years later become a martyr for open access, and Sam Altman, who would later become the second president of YC.I don't think it was entirely luck that the first batch was so good.You had to be pretty bold to sign up for a weird thing like the Summer Founders Program instead of a summer job at a legit place like Microsoft or Goldman Sachs.The deal for startups was based on a combination of the deal we did with Julian ($10k for 10%) and what Robert said MIT grad students got for the summer ($6k).We invested $6k per founder, which in the typical two-founder case was $12k, in return for 6%.That had to be fair, because it was twice as good as the deal we ourselves had taken.Plus that first summer, which was really hot, Jessica brought the founders free air conditioners.[16]\r\n\r\nFairly quickly I realized that we had stumbled upon the way to scale startup funding.Funding startups in batches was more convenient for us, because it meant we could do things for a lot of startups at once, but being part of a batch was better for the startups too.It solved one of the biggest problems faced by founders: the isolation.Now you not only had colleagues, but colleagues who understood the problems you were facing and could tell you how they were solving them.As YC grew, we started to notice other advantages of scale.The alumni became a tight community, dedicated to helping one another, and especially the current batch, whose shoes they remembered being in.We also noticed that the startups were becoming one another's customers.We used to refer jokingly to the \"YC GDP,\" but as YC grows this becomes less and less of a joke.Now lots of startups get their initial set of customers almost entirely from among their batchmates.I had not originally intended YC to be a full-time job.I was going to do three things: hack, write essays, and work on YC.As YC grew, and I grew more excited about it, it started to take up a lot more than a third of my attention.But for the first few years I was still able to work on other things.In the summer of 2006, Robert and I started working on a new version of Arc.This one was reasonably fast, because it was compiled into Scheme.To test this new Arc, I wrote Hacker News in it.It was originally meant to be a news aggregator for startup founders and was called Startup News, but after a few months I got tired of reading about nothing but startups.Plus it wasn't startup founders we wanted to reach.It was future startup founders.So I changed the name to Hacker News and the topic to whatever engaged one's intellectual curiosity.HN was no doubt good for YC, but it was also by far the biggest source of stress for me.If all I'd had to do was select and help founders, life would have been so easy.And that implies that HN was a mistake.Surely the biggest source of stress in one's work should at least be something close to the core of the work.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"wyDtZYvDoywOExbQGeo79g+2RFIH313kniWJ4WmXzrg="},"9bba799f-bc1b-496c-bcd6-8e11dfa23bc9":{"id_":"9bba799f-bc1b-496c-bcd6-8e11dfa23bc9","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"58dc8069-d2b9-4b0a-83f8-9c94190a5c2b","metadata":{},"hash":"wyDtZYvDoywOExbQGeo79g+2RFIH313kniWJ4WmXzrg="},"NEXT":{"nodeId":"ee9f66d8-2007-4c32-a403-9819f97c39bb","metadata":{},"hash":"hzB0Z+HmbBEWiBXUaNB2QF03iqCUKa61K6N4jFUUicc="}},"text":"In the summer of 2006, Robert and I started working on a new version of Arc.This one was reasonably fast, because it was compiled into Scheme.To test this new Arc, I wrote Hacker News in it.It was originally meant to be a news aggregator for startup founders and was called Startup News, but after a few months I got tired of reading about nothing but startups.Plus it wasn't startup founders we wanted to reach.It was future startup founders.So I changed the name to Hacker News and the topic to whatever engaged one's intellectual curiosity.HN was no doubt good for YC, but it was also by far the biggest source of stress for me.If all I'd had to do was select and help founders, life would have been so easy.And that implies that HN was a mistake.Surely the biggest source of stress in one's work should at least be something close to the core of the work.Whereas I was like someone who was in pain while running a marathon not from the exertion of running, but because I had a blister from an ill-fitting shoe.When I was dealing with some urgent problem during YC, there was about a 60% chance it had to do with HN, and a 40% chance it had do with everything else combined.[17]\r\n\r\nAs well as HN, I wrote all of YC's internal software in Arc.But while I continued to work a good deal in Arc, I gradually stopped working on Arc, partly because I didn't have time to, and partly because it was a lot less attractive to mess around with the language now that we had all this infrastructure depending on it.So now my three projects were reduced to two: writing essays and working on YC.YC was different from other kinds of work I've done.Instead of deciding for myself what to work on, the problems came to me.Every 6 months there was a new batch of startups, and their problems, whatever they were, became our problems.It was very engaging work, because their problems were quite varied, and the good founders were very effective.If you were trying to learn the most you could about startups in the shortest possible time, you couldn't have picked a better way to do it.There were parts of the job I didn't like.Disputes between cofounders, figuring out when people were lying to us, fighting with people who maltreated the startups, and so on.But I worked hard even at the parts I didn't like.I was haunted by something Kevin Hale once said about companies: \"No one works harder than the boss.\"He meant it both descriptively and prescriptively, and it was the second part that scared me.I wanted YC to be good, so if how hard I worked set the upper bound on how hard everyone else worked, I'd better work very hard.One day in 2010, when he was visiting California for interviews, Robert Morris did something astonishing: he offered me unsolicited advice.I can only remember him doing that once before.One day at Viaweb, when I was bent over double from a kidney stone, he suggested that it would be a good idea for him to take me to the hospital.That was what it took for Rtm to offer unsolicited advice.So I remember his exact words very clearly.\"You know,\" he said, \"you should make sure Y Combinator isn't the last cool thing you do.\"At the time I didn't understand what he meant, but gradually it dawned on me that he was saying I should quit.This seemed strange advice, because YC was doing great.But if there was one thing rarer than Rtm offering advice, it was Rtm being wrong.So this set me thinking.It was true that on my current trajectory, YC would be the last thing I did, because it was only taking up more of my attention.It had already eaten Arc, and was in the process of eating essays too.Either YC was my life's work or I'd have to leave eventually.And it wasn't, so I would.In the summer of 2012 my mother had a stroke, and the cause turned out to be a blood clot caused by colon cancer.The stroke destroyed her balance, and she was put in a nursing home, but she really wanted to get out of it and back to her house, and my sister and I were determined to help her do it.I used to fly up to Oregon to visit her regularly, and I had a lot of time to think on those flights.On one of them I realized I was ready to hand YC over to someone else.I asked Jessica if she wanted to be president, but she didn't, so we decided we'd try to recruit Sam Altman.We talked to Robert and Trevor and we agreed to make it a complete changing of the guard.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"9pPCfqxfIUMlBhijLLeFZgRPeiuGA8itAXb28pdHF6c="},"ee9f66d8-2007-4c32-a403-9819f97c39bb":{"id_":"ee9f66d8-2007-4c32-a403-9819f97c39bb","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"9bba799f-bc1b-496c-bcd6-8e11dfa23bc9","metadata":{},"hash":"9pPCfqxfIUMlBhijLLeFZgRPeiuGA8itAXb28pdHF6c="},"NEXT":{"nodeId":"cc43c040-efeb-4103-b9aa-ffac740def7d","metadata":{},"hash":"dK93EvTWl4DvIsBrw0cjMlIlW0QnxOkAbtG2CnwhidA="}},"text":"Either YC was my life's work or I'd have to leave eventually.And it wasn't, so I would.In the summer of 2012 my mother had a stroke, and the cause turned out to be a blood clot caused by colon cancer.The stroke destroyed her balance, and she was put in a nursing home, but she really wanted to get out of it and back to her house, and my sister and I were determined to help her do it.I used to fly up to Oregon to visit her regularly, and I had a lot of time to think on those flights.On one of them I realized I was ready to hand YC over to someone else.I asked Jessica if she wanted to be president, but she didn't, so we decided we'd try to recruit Sam Altman.We talked to Robert and Trevor and we agreed to make it a complete changing of the guard.Up till that point YC had been controlled by the original LLC we four had started.But we wanted YC to last for a long time, and to do that it couldn't be controlled by the founders.So if Sam said yes, we'd let him reorganize YC.Robert and I would retire, and Jessica and Trevor would become ordinary partners.When we asked Sam if he wanted to be president of YC, initially he said no.He wanted to start a startup to make nuclear reactors.But I kept at it, and in October 2013 he finally agreed.We decided he'd take over starting with the winter 2014 batch.For the rest of 2013 I left running YC more and more to Sam, partly so he could learn the job, and partly because I was focused on my mother, whose cancer had returned.She died on January 15, 2014.We knew this was coming, but it was still hard when it did.I kept working on YC till March, to help get that batch of startups through Demo Day, then I checked out pretty completely.(I still talk to alumni and to new startups working on things I'm interested in, but that only takes a few hours a week.)What should I do next?Rtm's advice hadn't included anything about that.I wanted to do something completely different, so I decided I'd paint.I wanted to see how good I could get if I really focused on it.So the day after I stopped working on YC, I started painting.I was rusty and it took a while to get back into shape, but it was at least completely engaging.[18]\r\n\r\nI spent most of the rest of 2014 painting.I'd never been able to work so uninterruptedly before, and I got to be better than I had been.Not good enough, but better.Then in November, right in the middle of a painting, I ran out of steam.Up till that point I'd always been curious to see how the painting I was working on would turn out, but suddenly finishing this one seemed like a chore.So I stopped working on it and cleaned my brushes and haven't painted since.So far anyway.I realize that sounds rather wimpy.But attention is a zero sum game.If you can choose what to work on, and you choose a project that's not the best one (or at least a good one) for you, then it's getting in the way of another project that is.And at 50 there was some opportunity cost to screwing around.I started writing essays again, and wrote a bunch of new ones over the next few months.I even wrote a couple that weren't about startups.Then in March 2015 I started working on Lisp again.The distinctive thing about Lisp is that its core is a language defined by writing an interpreter in itself.It wasn't originally intended as a programming language in the ordinary sense.It was meant to be a formal model of computation, an alternative to the Turing machine.If you want to write an interpreter for a language in itself, what's the minimum set of predefined operators you need?The Lisp that John McCarthy invented, or more accurately discovered, is an answer to that question.[19]\r\n\r\nMcCarthy didn't realize this Lisp could even be used to program computers till his grad student Steve Russell suggested it.Russell translated McCarthy's interpreter into IBM 704 machine language, and from that point Lisp started also to be a programming language in the ordinary sense.But its origins as a model of computation gave it a power and elegance that other languages couldn't match.It was this that attracted me in college, though I didn't understand why at the time.McCarthy's 1960 Lisp did nothing more than interpret Lisp expressions.It was missing a lot of things you'd want in a programming language.So these had to be added, and when they were, they weren't defined using McCarthy's original axiomatic approach.That wouldn't have been feasible at the time.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"hzB0Z+HmbBEWiBXUaNB2QF03iqCUKa61K6N4jFUUicc="},"cc43c040-efeb-4103-b9aa-ffac740def7d":{"id_":"cc43c040-efeb-4103-b9aa-ffac740def7d","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"ee9f66d8-2007-4c32-a403-9819f97c39bb","metadata":{},"hash":"hzB0Z+HmbBEWiBXUaNB2QF03iqCUKa61K6N4jFUUicc="},"NEXT":{"nodeId":"e24b156b-aba1-46ba-8cf3-8cad75ea0caa","metadata":{},"hash":"/6QOnRPifJd520yaqu7snZdutK8HYqfgXDkCxYjLqu8="}},"text":"The Lisp that John McCarthy invented, or more accurately discovered, is an answer to that question.[19]\r\n\r\nMcCarthy didn't realize this Lisp could even be used to program computers till his grad student Steve Russell suggested it.Russell translated McCarthy's interpreter into IBM 704 machine language, and from that point Lisp started also to be a programming language in the ordinary sense.But its origins as a model of computation gave it a power and elegance that other languages couldn't match.It was this that attracted me in college, though I didn't understand why at the time.McCarthy's 1960 Lisp did nothing more than interpret Lisp expressions.It was missing a lot of things you'd want in a programming language.So these had to be added, and when they were, they weren't defined using McCarthy's original axiomatic approach.That wouldn't have been feasible at the time.McCarthy tested his interpreter by hand-simulating the execution of programs.But it was already getting close to the limit of interpreters you could test that way — indeed, there was a bug in it that McCarthy had overlooked.To test a more complicated interpreter, you'd have had to run it, and computers then weren't powerful enough.Now they are, though.Now you could continue using McCarthy's axiomatic approach till you'd defined a complete programming language.And as long as every change you made to McCarthy's Lisp was a discoveredness-preserving transformation, you could, in principle, end up with a complete language that had this quality.Harder to do than to talk about, of course, but if it was possible in principle, why not try?So I decided to take a shot at it.It took 4 years, from March 26, 2015 to October 12, 2019.It was fortunate that I had a precisely defined goal, or it would have been hard to keep at it for so long.I wrote this new Lisp, called Bel, in itself in Arc.That may sound like a contradiction, but it's an indication of the sort of trickery I had to engage in to make this work.By means of an egregious collection of hacks I managed to make something close enough to an interpreter written in itself that could actually run.Not fast, but fast enough to test.I had to ban myself from writing essays during most of this time, or I'd never have finished.In late 2015 I spent 3 months writing essays, and when I went back to working on Bel I could barely understand the code.Not so much because it was badly written as because the problem is so convoluted.When you're working on an interpreter written in itself, it's hard to keep track of what's happening at what level, and errors can be practically encrypted by the time you get them.So I said no more essays till Bel was done.But I told few people about Bel while I was working on it.So for years it must have seemed that I was doing nothing, when in fact I was working harder than I'd ever worked on anything.Occasionally after wrestling for hours with some gruesome bug I'd check Twitter or HN and see someone asking \"Does Paul Graham still code?\"Working on Bel was hard but satisfying.I worked on it so intensively that at any given time I had a decent chunk of the code in my head and could write more there.I remember taking the boys to the coast on a sunny day in 2015 and figuring out how to deal with some problem involving continuations while I watched them play in the tide pools.It felt like I was doing life right.I remember that because I was slightly dismayed at how novel it felt.The good news is that I had more moments like this over the next few years.In the summer of 2016 we moved to England.We wanted our kids to see what it was like living in another country, and since I was a British citizen by birth, that seemed the obvious choice.We only meant to stay for a year, but we liked it so much that we still live there.So most of Bel was written in England.In the fall of 2019, Bel was finally finished.Like McCarthy's original Lisp, it's a spec rather than an implementation, although like McCarthy's Lisp it's a spec expressed as code.Now that I could write essays again, I wrote a bunch about topics I'd had stacked up.I kept writing essays through 2020, but I also started to think about other things I could work on.How should I choose what to do?Well, how had I chosen what to work on in the past?I wrote an essay for myself to answer that question, and I was surprised how long and messy the answer turned out to be.If this surprised me, who'd lived it, then I thought perhaps it would be interesting to other people, and encouraging to those with similarly messy lives.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"dK93EvTWl4DvIsBrw0cjMlIlW0QnxOkAbtG2CnwhidA="},"e24b156b-aba1-46ba-8cf3-8cad75ea0caa":{"id_":"e24b156b-aba1-46ba-8cf3-8cad75ea0caa","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"cc43c040-efeb-4103-b9aa-ffac740def7d","metadata":{},"hash":"dK93EvTWl4DvIsBrw0cjMlIlW0QnxOkAbtG2CnwhidA="},"NEXT":{"nodeId":"a02beb89-68d5-4cea-9dc0-206cff0ae20c","metadata":{},"hash":"HcRD3lTtLKWhbNjIEXIzyZjLOuoSFsuMACPcmjxsYjs="}},"text":"We only meant to stay for a year, but we liked it so much that we still live there.So most of Bel was written in England.In the fall of 2019, Bel was finally finished.Like McCarthy's original Lisp, it's a spec rather than an implementation, although like McCarthy's Lisp it's a spec expressed as code.Now that I could write essays again, I wrote a bunch about topics I'd had stacked up.I kept writing essays through 2020, but I also started to think about other things I could work on.How should I choose what to do?Well, how had I chosen what to work on in the past?I wrote an essay for myself to answer that question, and I was surprised how long and messy the answer turned out to be.If this surprised me, who'd lived it, then I thought perhaps it would be interesting to other people, and encouraging to those with similarly messy lives.So I wrote a more detailed version for others to read, and this is the last sentence of it.If you wanted to get rich, how would you do it?I think your best bet would be to start or join a startup.That's been a reliable way to get rich for hundreds of years.The word \"startup\" dates from the 1960s, but what happens in one is very similar to the venture-backed trading voyages of the Middle Ages.Startups usually involve technology, so much so that the phrase \"high-tech startup\" is almost redundant.A startup is a small company that takes on a hard technical problem.Lots of people get rich knowing nothing more than that.You don't have to know physics to be a good pitcher.But I think it could give you an edge to understand the underlying principles.Why do startups have to be small?Will a startup inevitably stop being a startup as it grows larger?And why do they so often work on developing new technology?Why are there so many startups selling new drugs or computer software, and none selling corn oil or laundry detergent?The Proposition\r\n\r\nEconomically, you can think of a startup as a way to compress your whole working life into a few years.Instead of working at a low intensity for forty years, you work as hard as you possibly can for four.This pays especially well in technology, where you earn a premium for working fast.Here is a brief sketch of the economic proposition.If you're a good hacker in your mid twenties, you can get a job paying about $80,000 per year.So on average such a hacker must be able to do at least $80,000 worth of work per year for the company just to break even.You could probably work twice as many hours as a corporate employee, and if you focus you can probably get three times as much done in an hour.[1] You should get another multiple of two, at least, by eliminating the drag of the pointy-haired middle manager who would be your boss in a big company.Then there is one more multiple: how much smarter are you than your job description expects you to be?Suppose another multiple of three.Combine all these multipliers, and I'm claiming you could be 36 times more productive than you're expected to be in a random corporate job.[2] If a fairly good hacker is worth $80,000 a year at a big company, then a smart hacker working very hard without any corporate bullshit to slow him down should be able to do work worth about $3 million a year.Like all back-of-the-envelope calculations, this one has a lot of wiggle room.I wouldn't try to defend the actual numbers.But I stand by the structure of the calculation.I'm not claiming the multiplier is precisely 36, but it is certainly more than 10, and probably rarely as high as 100.If $3 million a year seems high, remember that we're talking about the limit case: the case where you not only have zero leisure time but indeed work so hard that you endanger your health.Startups are not magic.They don't change the laws of wealth creation.They just represent a point at the far end of the curve.There is a conservation law at work here: if you want to make a million dollars, you have to endure a million dollars' worth of pain.For example, one way to make a million dollars would be to work for the Post Office your whole life, and save every penny of your salary.Imagine the stress of working for the Post Office for fifty years.In a startup you compress all this stress into three or four years.You do tend to get a certain bulk discount if you buy the economy-size pain, but you can't evade the fundamental conservation law.If starting a startup were easy, everyone would do it.Millions, not Billions\r\n\r\nIf $3 million a year seems high to some people, it will seem low to others.Three million?How do I get to be a billionaire, like Bill Gates?","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"/6QOnRPifJd520yaqu7snZdutK8HYqfgXDkCxYjLqu8="},"a02beb89-68d5-4cea-9dc0-206cff0ae20c":{"id_":"a02beb89-68d5-4cea-9dc0-206cff0ae20c","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"e24b156b-aba1-46ba-8cf3-8cad75ea0caa","metadata":{},"hash":"/6QOnRPifJd520yaqu7snZdutK8HYqfgXDkCxYjLqu8="},"NEXT":{"nodeId":"0921704e-137b-4e92-9a47-7c1015c4ebca","metadata":{},"hash":"eWkSE0pEwGeak83wub4H2GawUBJLDFjVKchssgJkn5k="}},"text":"Startups are not magic.They don't change the laws of wealth creation.They just represent a point at the far end of the curve.There is a conservation law at work here: if you want to make a million dollars, you have to endure a million dollars' worth of pain.For example, one way to make a million dollars would be to work for the Post Office your whole life, and save every penny of your salary.Imagine the stress of working for the Post Office for fifty years.In a startup you compress all this stress into three or four years.You do tend to get a certain bulk discount if you buy the economy-size pain, but you can't evade the fundamental conservation law.If starting a startup were easy, everyone would do it.Millions, not Billions\r\n\r\nIf $3 million a year seems high to some people, it will seem low to others.Three million?How do I get to be a billionaire, like Bill Gates?So let's get Bill Gates out of the way right now.It's not a good idea to use famous rich people as examples, because the press only write about the very richest, and these tend to be outliers.Bill Gates is a smart, determined, and hardworking man, but you need more than that to make as much money as he has.You also need to be very lucky.There is a large random factor in the success of any company.So the guys you end up reading about in the papers are the ones who are very smart, totally dedicated, and win the lottery.Certainly Bill is smart and dedicated, but Microsoft also happens to have been the beneficiary of one of the most spectacular blunders in the history of business: the licensing deal for DOS.No doubt Bill did everything he could to steer IBM into making that blunder, and he has done an excellent job of exploiting it, but if there had been one person with a brain on IBM's side, Microsoft's future would have been very different.Microsoft at that stage had little leverage over IBM.They were effectively a component supplier.If IBM had required an exclusive license, as they should have, Microsoft would still have signed the deal.It would still have meant a lot of money for them, and IBM could easily have gotten an operating system elsewhere.Instead IBM ended up using all its power in the market to give Microsoft control of the PC standard.From that point, all Microsoft had to do was execute.They never had to bet the company on a bold decision.All they had to do was play hardball with licensees and copy more innovative products reasonably promptly.If IBM hadn't made this mistake, Microsoft would still have been a successful company, but it could not have grown so big so fast.Bill Gates would be rich, but he'd be somewhere near the bottom of the Forbes 400 with the other guys his age.There are a lot of ways to get rich, and this essay is about only one of them.This essay is about how to make money by creating wealth and getting paid for it.There are plenty of other ways to get money, including chance, speculation, marriage, inheritance, theft, extortion, fraud, monopoly, graft, lobbying, counterfeiting, and prospecting.Most of the greatest fortunes have probably involved several of these.The advantage of creating wealth, as a way to get rich, is not just that it's more legitimate (many of the other methods are now illegal) but that it's more straightforward.You just have to do something people want.Money Is Not Wealth\r\n\r\nIf you want to create wealth, it will help to understand what it is.Wealth is not the same thing as money.[3] Wealth is as old as human history.Far older, in fact; ants have wealth.Money is a comparatively recent invention.Wealth is the fundamental thing.Wealth is stuff we want: food, clothes, houses, cars, gadgets, travel to interesting places, and so on.You can have wealth without having money.If you had a magic machine that could on command make you a car or cook you dinner or do your laundry, or do anything else you wanted, you wouldn't need money.Whereas if you were in the middle of Antarctica, where there is nothing to buy, it wouldn't matter how much money you had.Wealth is what you want, not money.But if wealth is the important thing, why does everyone talk about making money?It is a kind of shorthand: money is a way of moving wealth, and in practice they are usually interchangeable.But they are not the same thing, and unless you plan to get rich by counterfeiting, talking about making money can make it harder to understand how to make money.Money is a side effect of specialization.In a specialized society, most of the things you need, you can't make for yourself.If you want a potato or a pencil or a place to live, you have to get it from someone else.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"HcRD3lTtLKWhbNjIEXIzyZjLOuoSFsuMACPcmjxsYjs="},"0921704e-137b-4e92-9a47-7c1015c4ebca":{"id_":"0921704e-137b-4e92-9a47-7c1015c4ebca","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"a02beb89-68d5-4cea-9dc0-206cff0ae20c","metadata":{},"hash":"HcRD3lTtLKWhbNjIEXIzyZjLOuoSFsuMACPcmjxsYjs="},"NEXT":{"nodeId":"86c691e9-8fb5-4931-b287-ddc27a64e3e9","metadata":{},"hash":"Az+uHyq7vbfAx6crQROy+z4xD0RgXZG/Qjy152U/sBc="}},"text":"If you had a magic machine that could on command make you a car or cook you dinner or do your laundry, or do anything else you wanted, you wouldn't need money.Whereas if you were in the middle of Antarctica, where there is nothing to buy, it wouldn't matter how much money you had.Wealth is what you want, not money.But if wealth is the important thing, why does everyone talk about making money?It is a kind of shorthand: money is a way of moving wealth, and in practice they are usually interchangeable.But they are not the same thing, and unless you plan to get rich by counterfeiting, talking about making money can make it harder to understand how to make money.Money is a side effect of specialization.In a specialized society, most of the things you need, you can't make for yourself.If you want a potato or a pencil or a place to live, you have to get it from someone else.How do you get the person who grows the potatoes to give you some?By giving him something he wants in return.But you can't get very far by trading things directly with the people who need them.If you make violins, and none of the local farmers wants one, how will you eat?The solution societies find, as they get more specialized, is to make the trade into a two-step process.Instead of trading violins directly for potatoes, you trade violins for, say, silver, which you can then trade again for anything else you need.The intermediate stuff-- the medium of exchange-- can be anything that's rare and portable.Historically metals have been the most common, but recently we've been using a medium of exchange, called the dollar, that doesn't physically exist.It works as a medium of exchange, however, because its rarity is guaranteed by the U.S.Government.The advantage of a medium of exchange is that it makes trade work.The disadvantage is that it tends to obscure what trade really means.People think that what a business does is make money.But money is just the intermediate stage-- just a shorthand-- for whatever people want.What most businesses really do is make wealth.They do something people want.[4]\r\n\r\nThe Pie Fallacy\r\n\r\nA surprising number of people retain from childhood the idea that there is a fixed amount of wealth in the world.There is, in any normal family, a fixed amount of money at any moment.But that's not the same thing.When wealth is talked about in this context, it is often described as a pie.\"You can't make the pie larger,\" say politicians.When you're talking about the amount of money in one family's bank account, or the amount available to a government from one year's tax revenue, this is true.If one person gets more, someone else has to get less.I can remember believing, as a child, that if a few rich people had all the money, it left less for everyone else.Many people seem to continue to believe something like this well into adulthood.This fallacy is usually there in the background when you hear someone talking about how x percent of the population have y percent of the wealth.If you plan to start a startup, then whether you realize it or not, you're planning to disprove the Pie Fallacy.What leads people astray here is the abstraction of money.Money is not wealth.It's just something we use to move wealth around.So although there may be, in certain specific moments (like your family, this month) a fixed amount of money available to trade with other people for things you want, there is not a fixed amount of wealth in the world.You can make more wealth.Wealth has been getting created and destroyed (but on balance, created) for all of human history.Suppose you own a beat-up old car.Instead of sitting on your butt next summer, you could spend the time restoring your car to pristine condition.In doing so you create wealth.The world is-- and you specifically are-- one pristine old car the richer.And not just in some metaphorical way.If you sell your car, you'll get more for it.In restoring your old car you have made yourself richer.You haven't made anyone else poorer.So there is obviously not a fixed pie.And in fact, when you look at it this way, you wonder why anyone would think there was.[5]\r\n\r\nKids know, without knowing they know, that they can create wealth.If you need to give someone a present and don't have any money, you make one.But kids are so bad at making things that they consider home-made presents to be a distinct, inferior, sort of thing to store-bought ones-- a mere expression of the proverbial thought that counts.And indeed, the lumpy ashtrays we made for our parents did not have much of a resale market.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"eWkSE0pEwGeak83wub4H2GawUBJLDFjVKchssgJkn5k="},"86c691e9-8fb5-4931-b287-ddc27a64e3e9":{"id_":"86c691e9-8fb5-4931-b287-ddc27a64e3e9","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"0921704e-137b-4e92-9a47-7c1015c4ebca","metadata":{},"hash":"eWkSE0pEwGeak83wub4H2GawUBJLDFjVKchssgJkn5k="},"NEXT":{"nodeId":"e75b2519-3142-4609-925a-3b513e0a71c0","metadata":{},"hash":"avUXXTHRaJb2fxEDFkXsRkuiW/PVu9xBrbWRXCtlMb0="}},"text":"In doing so you create wealth.The world is-- and you specifically are-- one pristine old car the richer.And not just in some metaphorical way.If you sell your car, you'll get more for it.In restoring your old car you have made yourself richer.You haven't made anyone else poorer.So there is obviously not a fixed pie.And in fact, when you look at it this way, you wonder why anyone would think there was.[5]\r\n\r\nKids know, without knowing they know, that they can create wealth.If you need to give someone a present and don't have any money, you make one.But kids are so bad at making things that they consider home-made presents to be a distinct, inferior, sort of thing to store-bought ones-- a mere expression of the proverbial thought that counts.And indeed, the lumpy ashtrays we made for our parents did not have much of a resale market.Craftsmen\r\n\r\nThe people most likely to grasp that wealth can be created are the ones who are good at making things, the craftsmen.Their hand-made objects become store-bought ones.But with the rise of industrialization there are fewer and fewer craftsmen.One of the biggest remaining groups is computer programmers.A programmer can sit down in front of a computer and create wealth.A good piece of software is, in itself, a valuable thing.There is no manufacturing to confuse the issue.Those characters you type are a complete, finished product.If someone sat down and wrote a web browser that didn't suck (a fine idea, by the way), the world would be that much richer.[5b]\r\n\r\nEveryone in a company works together to create wealth, in the sense of making more things people want.Many of the employees (e.g.the people in the mailroom or the personnel department) work at one remove from the actual making of stuff.Not the programmers.They literally think the product, one line at a time.And so it's clearer to programmers that wealth is something that's made, rather than being distributed, like slices of a pie, by some imaginary Daddy.It's also obvious to programmers that there are huge variations in the rate at which wealth is created.At Viaweb we had one programmer who was a sort of monster of productivity.I remember watching what he did one long day and estimating that he had added several hundred thousand dollars to the market value of the company.A great programmer, on a roll, could create a million dollars worth of wealth in a couple weeks.A mediocre programmer over the same period will generate zero or even negative wealth (e.g.by introducing bugs).This is why so many of the best programmers are libertarians.In our world, you sink or swim, and there are no excuses.When those far removed from the creation of wealth-- undergraduates, reporters, politicians-- hear that the richest 5% of the people have half the total wealth, they tend to think injustice!An experienced programmer would be more likely to think is that all?The top 5% of programmers probably write 99% of the good software.Wealth can be created without being sold.Scientists, till recently at least, effectively donated the wealth they created.We are all richer for knowing about penicillin, because we're less likely to die from infections.Wealth is whatever people want, and not dying is certainly something we want.Hackers often donate their work by writing open source software that anyone can use for free.I am much the richer for the operating system FreeBSD, which I'm running on the computer I'm using now, and so is Yahoo, which runs it on all their servers.What a Job Is\r\n\r\nIn industrialized countries, people belong to one institution or another at least until their twenties.After all those years you get used to the idea of belonging to a group of people who all get up in the morning, go to some set of buildings, and do things that they do not, ordinarily, enjoy doing.Belonging to such a group becomes part of your identity: name, age, role, institution.If you have to introduce yourself, or someone else describes you, it will be as something like, John Smith, age 10, a student at such and such elementary school, or John Smith, age 20, a student at such and such college.When John Smith finishes school he is expected to get a job.And what getting a job seems to mean is joining another institution.Superficially it's a lot like college.You pick the companies you want to work for and apply to join them.If one likes you, you become a member of this new group.You get up in the morning and go to a new set of buildings, and do things that you do not, ordinarily, enjoy doing.There are a few differences: life is not as much fun, and you get paid, instead of paying, as you did in college.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"Az+uHyq7vbfAx6crQROy+z4xD0RgXZG/Qjy152U/sBc="},"e75b2519-3142-4609-925a-3b513e0a71c0":{"id_":"e75b2519-3142-4609-925a-3b513e0a71c0","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"86c691e9-8fb5-4931-b287-ddc27a64e3e9","metadata":{},"hash":"Az+uHyq7vbfAx6crQROy+z4xD0RgXZG/Qjy152U/sBc="},"NEXT":{"nodeId":"4c032f7d-70d4-41f5-bcc3-deba16ff0bcf","metadata":{},"hash":"KKnsf5Incly5i0YXwrhOZFFze7J7IS4xDJtcNGL0490="}},"text":"Belonging to such a group becomes part of your identity: name, age, role, institution.If you have to introduce yourself, or someone else describes you, it will be as something like, John Smith, age 10, a student at such and such elementary school, or John Smith, age 20, a student at such and such college.When John Smith finishes school he is expected to get a job.And what getting a job seems to mean is joining another institution.Superficially it's a lot like college.You pick the companies you want to work for and apply to join them.If one likes you, you become a member of this new group.You get up in the morning and go to a new set of buildings, and do things that you do not, ordinarily, enjoy doing.There are a few differences: life is not as much fun, and you get paid, instead of paying, as you did in college.But the similarities feel greater than the differences.John Smith is now John Smith, 22, a software developer at such and such corporation.In fact John Smith's life has changed more than he realizes.Socially, a company looks much like college, but the deeper you go into the underlying reality, the more different it gets.What a company does, and has to do if it wants to continue to exist, is earn money.And the way most companies make money is by creating wealth.Companies can be so specialized that this similarity is concealed, but it is not only manufacturing companies that create wealth.A big component of wealth is location.Remember that magic machine that could make you cars and cook you dinner and so on?It would not be so useful if it delivered your dinner to a random location in central Asia.If wealth means what people want, companies that move things also create wealth.Ditto for many other kinds of companies that don't make anything physical.Nearly all companies exist to do something people want.And that's what you do, as well, when you go to work for a company.But here there is another layer that tends to obscure the underlying reality.In a company, the work you do is averaged together with a lot of other people's.You may not even be aware you're doing something people want.Your contribution may be indirect.But the company as a whole must be giving people something they want, or they won't make any money.And if they are paying you x dollars a year, then on average you must be contributing at least x dollars a year worth of work, or the company will be spending more than it makes, and will go out of business.Someone graduating from college thinks, and is told, that he needs to get a job, as if the important thing were becoming a member of an institution.A more direct way to put it would be: you need to start doing something people want.You don't need to join a company to do that.All a company is is a group of people working together to do something people want.It's doing something people want that matters, not joining the group.[6]\r\n\r\nFor most people the best plan probably is to go to work for some existing company.But it is a good idea to understand what's happening when you do this.A job means doing something people want, averaged together with everyone else in that company.Working Harder\r\n\r\nThat averaging gets to be a problem.I think the single biggest problem afflicting large companies is the difficulty of assigning a value to each person's work.For the most part they punt.In a big company you get paid a fairly predictable salary for working fairly hard.You're expected not to be obviously incompetent or lazy, but you're not expected to devote your whole life to your work.It turns out, though, that there are economies of scale in how much of your life you devote to your work.In the right kind of business, someone who really devoted himself to work could generate ten or even a hundred times as much wealth as an average employee.A programmer, for example, instead of chugging along maintaining and updating an existing piece of software, could write a whole new piece of software, and with it create a new source of revenue.Companies are not set up to reward people who want to do this.You can't go to your boss and say, I'd like to start working ten times as hard, so will you please pay me ten times as much?For one thing, the official fiction is that you are already working as hard as you can.But a more serious problem is that the company has no way of measuring the value of your work.Salesmen are an exception.It's easy to measure how much revenue they generate, and they're usually paid a percentage of it.If a salesman wants to work harder, he can just start doing it, and he will automatically get paid proportionally more.There is one other job besides sales where big companies can hire first-rate people: in the top management jobs.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"avUXXTHRaJb2fxEDFkXsRkuiW/PVu9xBrbWRXCtlMb0="},"4c032f7d-70d4-41f5-bcc3-deba16ff0bcf":{"id_":"4c032f7d-70d4-41f5-bcc3-deba16ff0bcf","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"e75b2519-3142-4609-925a-3b513e0a71c0","metadata":{},"hash":"avUXXTHRaJb2fxEDFkXsRkuiW/PVu9xBrbWRXCtlMb0="},"NEXT":{"nodeId":"6ad2b96e-e3be-4e9c-a3d2-a2bf79605043","metadata":{},"hash":"k5Kn3zb0OaQT5tWg+swd6EkgIMK1LTx78rqUooFmOFA="}},"text":"A programmer, for example, instead of chugging along maintaining and updating an existing piece of software, could write a whole new piece of software, and with it create a new source of revenue.Companies are not set up to reward people who want to do this.You can't go to your boss and say, I'd like to start working ten times as hard, so will you please pay me ten times as much?For one thing, the official fiction is that you are already working as hard as you can.But a more serious problem is that the company has no way of measuring the value of your work.Salesmen are an exception.It's easy to measure how much revenue they generate, and they're usually paid a percentage of it.If a salesman wants to work harder, he can just start doing it, and he will automatically get paid proportionally more.There is one other job besides sales where big companies can hire first-rate people: in the top management jobs.And for the same reason: their performance can be measured.The top managers are held responsible for the performance of the entire company.Because an ordinary employee's performance can't usually be measured, he is not expected to do more than put in a solid effort.Whereas top management, like salespeople, have to actually come up with the numbers.The CEO of a company that tanks cannot plead that he put in a solid effort.If the company does badly, he's done badly.A company that could pay all its employees so straightforwardly would be enormously successful.Many employees would work harder if they could get paid for it.More importantly, such a company would attract people who wanted to work especially hard.It would crush its competitors.Unfortunately, companies can't pay everyone like salesmen.Salesmen work alone.Most employees' work is tangled together.Suppose a company makes some kind of consumer gadget.The engineers build a reliable gadget with all kinds of new features; the industrial designers design a beautiful case for it; and then the marketing people convince everyone that it's something they've got to have.How do you know how much of the gadget's sales are due to each group's efforts?Or, for that matter, how much is due to the creators of past gadgets that gave the company a reputation for quality?There's no way to untangle all their contributions.Even if you could read the minds of the consumers, you'd find these factors were all blurred together.If you want to go faster, it's a problem to have your work tangled together with a large number of other people's.In a large group, your performance is not separately measurable-- and the rest of the group slows you down.Measurement and Leverage\r\n\r\nTo get rich you need to get yourself in a situation with two things, measurement and leverage.You need to be in a position where your performance can be measured, or there is no way to get paid more by doing more.And you have to have leverage, in the sense that the decisions you make have a big effect.Measurement alone is not enough.An example of a job with measurement but not leverage is doing piecework in a sweatshop.Your performance is measured and you get paid accordingly, but you have no scope for decisions.The only decision you get to make is how fast you work, and that can probably only increase your earnings by a factor of two or three.An example of a job with both measurement and leverage would be lead actor in a movie.Your performance can be measured in the gross of the movie.And you have leverage in the sense that your performance can make or break it.CEOs also have both measurement and leverage.They're measured, in that the performance of the company is their performance.And they have leverage in that their decisions set the whole company moving in one direction or another.I think everyone who gets rich by their own efforts will be found to be in a situation with measurement and leverage.Everyone I can think of does: CEOs, movie stars, hedge fund managers, professional athletes.A good hint to the presence of leverage is the possibility of failure.Upside must be balanced by downside, so if there is big potential for gain there must also be a terrifying possibility of loss.CEOs, stars, fund managers, and athletes all live with the sword hanging over their heads; the moment they start to suck, they're out.If you're in a job that feels safe, you are not going to get rich, because if there is no danger there is almost certainly no leverage.But you don't have to become a CEO or a movie star to be in a situation with measurement and leverage.All you need to do is be part of a small group working on a hard problem.Smallness = Measurement\r\n\r\nIf you can't measure the value of the work done by individual employees, you can get close.You can measure the value of the work done by small groups.One level at which you can accurately measure the revenue generated by employees is at the level of the whole company.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"KKnsf5Incly5i0YXwrhOZFFze7J7IS4xDJtcNGL0490="},"6ad2b96e-e3be-4e9c-a3d2-a2bf79605043":{"id_":"6ad2b96e-e3be-4e9c-a3d2-a2bf79605043","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"4c032f7d-70d4-41f5-bcc3-deba16ff0bcf","metadata":{},"hash":"KKnsf5Incly5i0YXwrhOZFFze7J7IS4xDJtcNGL0490="},"NEXT":{"nodeId":"a3f976f7-42db-4b62-bc1e-646fbd9dcb5a","metadata":{},"hash":"HzjMhgG3uczB/FzKvXVX0H1H25WGajcC5dxnJVRHgV0="}},"text":"Upside must be balanced by downside, so if there is big potential for gain there must also be a terrifying possibility of loss.CEOs, stars, fund managers, and athletes all live with the sword hanging over their heads; the moment they start to suck, they're out.If you're in a job that feels safe, you are not going to get rich, because if there is no danger there is almost certainly no leverage.But you don't have to become a CEO or a movie star to be in a situation with measurement and leverage.All you need to do is be part of a small group working on a hard problem.Smallness = Measurement\r\n\r\nIf you can't measure the value of the work done by individual employees, you can get close.You can measure the value of the work done by small groups.One level at which you can accurately measure the revenue generated by employees is at the level of the whole company.When the company is small, you are thereby fairly close to measuring the contributions of individual employees.A viable startup might only have ten employees, which puts you within a factor of ten of measuring individual effort.Starting or joining a startup is thus as close as most people can get to saying to one's boss, I want to work ten times as hard, so please pay me ten times as much.There are two differences: you're not saying it to your boss, but directly to the customers (for whom your boss is only a proxy after all), and you're not doing it individually, but along with a small group of other ambitious people.It will, ordinarily, be a group.Except in a few unusual kinds of work, like acting or writing books, you can't be a company of one person.And the people you work with had better be good, because it's their work that yours is going to be averaged with.A big company is like a giant galley driven by a thousand rowers.Two things keep the speed of the galley down.One is that individual rowers don't see any result from working harder.The other is that, in a group of a thousand people, the average rower is likely to be pretty average.If you took ten people at random out of the big galley and put them in a boat by themselves, they could probably go faster.They would have both carrot and stick to motivate them.An energetic rower would be encouraged by the thought that he could have a visible effect on the speed of the boat.And if someone was lazy, the others would be more likely to notice and complain.But the real advantage of the ten-man boat shows when you take the ten best rowers out of the big galley and put them in a boat together.They will have all the extra motivation that comes from being in a small group.But more importantly, by selecting that small a group you can get the best rowers.Each one will be in the top 1%.It's a much better deal for them to average their work together with a small group of their peers than to average it with everyone.That's the real point of startups.Ideally, you are getting together with a group of other people who also want to work a lot harder, and get paid a lot more, than they would in a big company.And because startups tend to get founded by self-selecting groups of ambitious people who already know one another (at least by reputation), the level of measurement is more precise than you get from smallness alone.A startup is not merely ten people, but ten people like you.Steve Jobs once said that the success or failure of a startup depends on the first ten employees.I agree.If anything, it's more like the first five.Being small is not, in itself, what makes startups kick butt, but rather that small groups can be select.You don't want small in the sense of a village, but small in the sense of an all-star team.The larger a group, the closer its average member will be to the average for the population as a whole.So all other things being equal, a very able person in a big company is probably getting a bad deal, because his performance is dragged down by the overall lower performance of the others.Of course, all other things often are not equal: the able person may not care about money, or may prefer the stability of a large company.But a very able person who does care about money will ordinarily do better to go off and work with a small group of peers.Technology = Leverage\r\n\r\nStartups offer anyone a way to be in a situation with measurement and leverage.They allow measurement because they're small, and they offer leverage because they make money by inventing new technology.What is technology?It's technique.It's the way we all do things.And when you discover a new way to do things, its value is multiplied by all the people who use it.It is the proverbial fishing rod, rather than the fish.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"k5Kn3zb0OaQT5tWg+swd6EkgIMK1LTx78rqUooFmOFA="},"a3f976f7-42db-4b62-bc1e-646fbd9dcb5a":{"id_":"a3f976f7-42db-4b62-bc1e-646fbd9dcb5a","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"6ad2b96e-e3be-4e9c-a3d2-a2bf79605043","metadata":{},"hash":"k5Kn3zb0OaQT5tWg+swd6EkgIMK1LTx78rqUooFmOFA="},"NEXT":{"nodeId":"0d2beea1-56af-4764-a627-6cbc0c550526","metadata":{},"hash":"zN+s2TlouijEYZ4ibGVYLrpXdJbuz5qN95H/8u2xNHQ="}},"text":"So all other things being equal, a very able person in a big company is probably getting a bad deal, because his performance is dragged down by the overall lower performance of the others.Of course, all other things often are not equal: the able person may not care about money, or may prefer the stability of a large company.But a very able person who does care about money will ordinarily do better to go off and work with a small group of peers.Technology = Leverage\r\n\r\nStartups offer anyone a way to be in a situation with measurement and leverage.They allow measurement because they're small, and they offer leverage because they make money by inventing new technology.What is technology?It's technique.It's the way we all do things.And when you discover a new way to do things, its value is multiplied by all the people who use it.It is the proverbial fishing rod, rather than the fish.That's the difference between a startup and a restaurant or a barber shop.You fry eggs or cut hair one customer at a time.Whereas if you solve a technical problem that a lot of people care about, you help everyone who uses your solution.That's leverage.If you look at history, it seems that most people who got rich by creating wealth did it by developing new technology.You just can't fry eggs or cut hair fast enough.What made the Florentines rich in 1200 was the discovery of new techniques for making the high-tech product of the time, fine woven cloth.What made the Dutch rich in 1600 was the discovery of shipbuilding and navigation techniques that enabled them to dominate the seas of the Far East.Fortunately there is a natural fit between smallness and solving hard problems.The leading edge of technology moves fast.Technology that's valuable today could be worthless in a couple years.Small companies are more at home in this world, because they don't have layers of bureaucracy to slow them down.Also, technical advances tend to come from unorthodox approaches, and small companies are less constrained by convention.Big companies can develop technology.They just can't do it quickly.Their size makes them slow and prevents them from rewarding employees for the extraordinary effort required.So in practice big companies only get to develop technology in fields where large capital requirements prevent startups from competing with them, like microprocessors, power plants, or passenger aircraft.And even in those fields they depend heavily on startups for components and ideas.It's obvious that biotech or software startups exist to solve hard technical problems, but I think it will also be found to be true in businesses that don't seem to be about technology.McDonald's, for example, grew big by designing a system, the McDonald's franchise, that could then be reproduced at will all over the face of the earth.A McDonald's franchise is controlled by rules so precise that it is practically a piece of software.Write once, run everywhere.Ditto for Wal-Mart.Sam Walton got rich not by being a retailer, but by designing a new kind of store.Use difficulty as a guide not just in selecting the overall aim of your company, but also at decision points along the way.At Viaweb one of our rules of thumb was run upstairs.Suppose you are a little, nimble guy being chased by a big, fat, bully.You open a door and find yourself in a staircase.Do you go up or down?I say up.The bully can probably run downstairs as fast as you can.Going upstairs his bulk will be more of a disadvantage.Running upstairs is hard for you but even harder for him.What this meant in practice was that we deliberately sought hard problems.If there were two features we could add to our software, both equally valuable in proportion to their difficulty, we'd always take the harder one.Not just because it was more valuable, but because it was harder.We delighted in forcing bigger, slower competitors to follow us over difficult ground.Like guerillas, startups prefer the difficult terrain of the mountains, where the troops of the central government can't follow.I can remember times when we were just exhausted after wrestling all day with some horrible technical problem.And I'd be delighted, because something that was hard for us would be impossible for our competitors.This is not just a good way to run a startup.It's what a startup is.Venture capitalists know about this and have a phrase for it: barriers to entry.If you go to a VC with a new idea and ask him to invest in it, one of the first things he'll ask is, how hard would this be for someone else to develop?That is, how much difficult ground have you put between yourself and potential pursuers?[7] And you had better have a convincing explanation of why your technology would be hard to duplicate.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"HzjMhgG3uczB/FzKvXVX0H1H25WGajcC5dxnJVRHgV0="},"0d2beea1-56af-4764-a627-6cbc0c550526":{"id_":"0d2beea1-56af-4764-a627-6cbc0c550526","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"a3f976f7-42db-4b62-bc1e-646fbd9dcb5a","metadata":{},"hash":"HzjMhgG3uczB/FzKvXVX0H1H25WGajcC5dxnJVRHgV0="},"NEXT":{"nodeId":"21ea1e94-f18f-4d07-a129-cb2bcb057ea7","metadata":{},"hash":"swqHBwh7LdjPd70yxwoTeNogq+AyjyOFeEs+t9J006A="}},"text":"We delighted in forcing bigger, slower competitors to follow us over difficult ground.Like guerillas, startups prefer the difficult terrain of the mountains, where the troops of the central government can't follow.I can remember times when we were just exhausted after wrestling all day with some horrible technical problem.And I'd be delighted, because something that was hard for us would be impossible for our competitors.This is not just a good way to run a startup.It's what a startup is.Venture capitalists know about this and have a phrase for it: barriers to entry.If you go to a VC with a new idea and ask him to invest in it, one of the first things he'll ask is, how hard would this be for someone else to develop?That is, how much difficult ground have you put between yourself and potential pursuers?[7] And you had better have a convincing explanation of why your technology would be hard to duplicate.Otherwise as soon as some big company becomes aware of it, they'll make their own, and with their brand name, capital, and distribution clout, they'll take away your market overnight.You'd be like guerillas caught in the open field by regular army forces.One way to put up barriers to entry is through patents.But patents may not provide much protection.Competitors commonly find ways to work around a patent.And if they can't, they may simply violate it and invite you to sue them.A big company is not afraid to be sued; it's an everyday thing for them.They'll make sure that suing them is expensive and takes a long time.Ever heard of Philo Farnsworth?He invented television.The reason you've never heard of him is that his company was not the one to make money from it.[8] The company that did was RCA, and Farnsworth's reward for his efforts was a decade of patent litigation.Here, as so often, the best defense is a good offense.If you can develop technology that's simply too hard for competitors to duplicate, you don't need to rely on other defenses.Start by picking a hard problem, and then at every decision point, take the harder choice.[9]\r\n\r\nThe Catch(es)\r\n\r\nIf it were simply a matter of working harder than an ordinary employee and getting paid proportionately, it would obviously be a good deal to start a startup.Up to a point it would be more fun.I don't think many people like the slow pace of big companies, the interminable meetings, the water-cooler conversations, the clueless middle managers, and so on.Unfortunately there are a couple catches.One is that you can't choose the point on the curve that you want to inhabit.You can't decide, for example, that you'd like to work just two or three times as hard, and get paid that much more.When you're running a startup, your competitors decide how hard you work.And they pretty much all make the same decision: as hard as you possibly can.The other catch is that the payoff is only on average proportionate to your productivity.There is, as I said before, a large random multiplier in the success of any company.So in practice the deal is not that you're 30 times as productive and get paid 30 times as much.It is that you're 30 times as productive, and get paid between zero and a thousand times as much.If the mean is 30x, the median is probably zero.Most startups tank, and not just the dogfood portals we all heard about during the Internet Bubble.It's common for a startup to be developing a genuinely good product, take slightly too long to do it, run out of money, and have to shut down.A startup is like a mosquito.A bear can absorb a hit and a crab is armored against one, but a mosquito is designed for one thing: to score.No energy is wasted on defense.The defense of mosquitos, as a species, is that there are a lot of them, but this is little consolation to the individual mosquito.Startups, like mosquitos, tend to be an all-or-nothing proposition.And you don't generally know which of the two you're going to get till the last minute.Viaweb came close to tanking several times.Our trajectory was like a sine wave.Fortunately we got bought at the top of the cycle, but it was damned close.While we were visiting Yahoo in California to talk about selling the company to them, we had to borrow a conference room to reassure an investor who was about to back out of a new round of funding that we needed to stay alive.The all-or-nothing aspect of startups was not something we wanted.Viaweb's hackers were all extremely risk-averse.If there had been some way just to work super hard and get paid for it, without having a lottery mixed in, we would have been delighted.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"zN+s2TlouijEYZ4ibGVYLrpXdJbuz5qN95H/8u2xNHQ="},"21ea1e94-f18f-4d07-a129-cb2bcb057ea7":{"id_":"21ea1e94-f18f-4d07-a129-cb2bcb057ea7","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"0d2beea1-56af-4764-a627-6cbc0c550526","metadata":{},"hash":"zN+s2TlouijEYZ4ibGVYLrpXdJbuz5qN95H/8u2xNHQ="},"NEXT":{"nodeId":"a02fb9b6-f315-4fb5-90af-925caeed4e39","metadata":{},"hash":"2xlb9btmFuo6tX0f95XHSQku/TcwVafyA1TOpzv84uw="}},"text":"Startups, like mosquitos, tend to be an all-or-nothing proposition.And you don't generally know which of the two you're going to get till the last minute.Viaweb came close to tanking several times.Our trajectory was like a sine wave.Fortunately we got bought at the top of the cycle, but it was damned close.While we were visiting Yahoo in California to talk about selling the company to them, we had to borrow a conference room to reassure an investor who was about to back out of a new round of funding that we needed to stay alive.The all-or-nothing aspect of startups was not something we wanted.Viaweb's hackers were all extremely risk-averse.If there had been some way just to work super hard and get paid for it, without having a lottery mixed in, we would have been delighted.We would have much preferred a 100% chance of $1 million to a 20% chance of $10 million, even though theoretically the second is worth twice as much.Unfortunately, there is not currently any space in the business world where you can get the first deal.The closest you can get is by selling your startup in the early stages, giving up upside (and risk) for a smaller but guaranteed payoff.We had a chance to do this, and stupidly, as we then thought, let it slip by.After that we became comically eager to sell.For the next year or so, if anyone expressed the slightest curiosity about Viaweb we would try to sell them the company.But there were no takers, so we had to keep going.It would have been a bargain to buy us at an early stage, but companies doing acquisitions are not looking for bargains.A company big enough to acquire startups will be big enough to be fairly conservative, and within the company the people in charge of acquisitions will be among the more conservative, because they are likely to be business school types who joined the company late.They would rather overpay for a safe choice.So it is easier to sell an established startup, even at a large premium, than an early-stage one.Get Users\r\n\r\nI think it's a good idea to get bought, if you can.Running a business is different from growing one.It is just as well to let a big company take over once you reach cruising altitude.It's also financially wiser, because selling allows you to diversify.What would you think of a financial advisor who put all his client's assets into one volatile stock?How do you get bought?Mostly by doing the same things you'd do if you didn't intend to sell the company.Being profitable, for example.But getting bought is also an art in its own right, and one that we spent a lot of time trying to master.Potential buyers will always delay if they can.The hard part about getting bought is getting them to act.For most people, the most powerful motivator is not the hope of gain, but the fear of loss.For potential acquirers, the most powerful motivator is the prospect that one of their competitors will buy you.This, as we found, causes CEOs to take red-eyes.The second biggest is the worry that, if they don't buy you now, you'll continue to grow rapidly and will cost more to acquire later, or even become a competitor.In both cases, what it all comes down to is users.You'd think that a company about to buy you would do a lot of research and decide for themselves how valuable your technology was.Not at all.What they go by is the number of users you have.In effect, acquirers assume the customers know who has the best technology.And this is not as stupid as it sounds.Users are the only real proof that you've created wealth.Wealth is what people want, and if people aren't using your software, maybe it's not just because you're bad at marketing.Maybe it's because you haven't made what they want.Venture capitalists have a list of danger signs to watch out for.Near the top is the company run by techno-weenies who are obsessed with solving interesting technical problems, instead of making users happy.In a startup, you're not just trying to solve problems.You're trying to solve problems that users care about.So I think you should make users the test, just as acquirers do.Treat a startup as an optimization problem in which performance is measured by number of users.As anyone who has tried to optimize software knows, the key is measurement.When you try to guess where your program is slow, and what would make it faster, you almost always guess wrong.Number of users may not be the perfect test, but it will be very close.It's what acquirers care about.It's what revenues depend on.It's what makes competitors unhappy.It's what impresses reporters, and potential new users.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"swqHBwh7LdjPd70yxwoTeNogq+AyjyOFeEs+t9J006A="},"a02fb9b6-f315-4fb5-90af-925caeed4e39":{"id_":"a02fb9b6-f315-4fb5-90af-925caeed4e39","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"21ea1e94-f18f-4d07-a129-cb2bcb057ea7","metadata":{},"hash":"swqHBwh7LdjPd70yxwoTeNogq+AyjyOFeEs+t9J006A="},"NEXT":{"nodeId":"7616d5e7-6913-483c-a19c-1cf508cbfda7","metadata":{},"hash":"NJbMYTgdIcjoIsrU+M32ji0CwY/a4J6tGVzVZEwOXOk="}},"text":"Venture capitalists have a list of danger signs to watch out for.Near the top is the company run by techno-weenies who are obsessed with solving interesting technical problems, instead of making users happy.In a startup, you're not just trying to solve problems.You're trying to solve problems that users care about.So I think you should make users the test, just as acquirers do.Treat a startup as an optimization problem in which performance is measured by number of users.As anyone who has tried to optimize software knows, the key is measurement.When you try to guess where your program is slow, and what would make it faster, you almost always guess wrong.Number of users may not be the perfect test, but it will be very close.It's what acquirers care about.It's what revenues depend on.It's what makes competitors unhappy.It's what impresses reporters, and potential new users.Certainly it's a better test than your a priori notions of what problems are important to solve, no matter how technically adept you are.Among other things, treating a startup as an optimization problem will help you avoid another pitfall that VCs worry about, and rightly-- taking a long time to develop a product.Now we can recognize this as something hackers already know to avoid: premature optimization.Get a version 1.0 out there as soon as you can.Until you have some users to measure, you're optimizing based on guesses.The ball you need to keep your eye on here is the underlying principle that wealth is what people want.If you plan to get rich by creating wealth, you have to know what people want.So few businesses really pay attention to making customers happy.How often do you walk into a store, or call a company on the phone, with a feeling of dread in the back of your mind?When you hear \"your call is important to us, please stay on the line,\" do you think, oh good, now everything will be all right?A restaurant can afford to serve the occasional burnt dinner.But in technology, you cook one thing and that's what everyone eats.So any difference between what people want and what you deliver is multiplied.You please or annoy customers wholesale.The closer you can get to what they want, the more wealth you generate.Wealth and Power\r\n\r\nMaking wealth is not the only way to get rich.For most of human history it has not even been the most common.Until a few centuries ago, the main sources of wealth were mines, slaves and serfs, land, and cattle, and the only ways to acquire these rapidly were by inheritance, marriage, conquest, or confiscation.Naturally wealth had a bad reputation.Two things changed.The first was the rule of law.For most of the world's history, if you did somehow accumulate a fortune, the ruler or his henchmen would find a way to steal it.But in medieval Europe something new happened.A new class of merchants and manufacturers began to collect in towns.[10] Together they were able to withstand the local feudal lord.So for the first time in our history, the bullies stopped stealing the nerds' lunch money.This was naturally a great incentive, and possibly indeed the main cause of the second big change, industrialization.A great deal has been written about the causes of the Industrial Revolution.But surely a necessary, if not sufficient, condition was that people who made fortunes be able to enjoy them in peace.[11] One piece of evidence is what happened to countries that tried to return to the old model, like the Soviet Union, and to a lesser extent Britain under the labor governments of the 1960s and early 1970s.Take away the incentive of wealth, and technical innovation grinds to a halt.Remember what a startup is, economically: a way of saying, I want to work faster.Instead of accumulating money slowly by being paid a regular wage for fifty years, I want to get it over with as soon as possible.So governments that forbid you to accumulate wealth are in effect decreeing that you work slowly.They're willing to let you earn $3 million over fifty years, but they're not willing to let you work so hard that you can do it in two.They are like the corporate boss that you can't go to and say, I want to work ten times as hard, so please pay me ten times a much.Except this is not a boss you can escape by starting your own company.The problem with working slowly is not just that technical innovation happens slowly.It's that it tends not to happen at all.It's only when you're deliberately looking for hard problems, as a way to use speed to the greatest advantage, that you take on this kind of project.Developing new technology is a pain in the ass.It is, as Edison said, one percent inspiration and ninety-nine percent perspiration.Without the incentive of wealth, no one wants to do it.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"2xlb9btmFuo6tX0f95XHSQku/TcwVafyA1TOpzv84uw="},"7616d5e7-6913-483c-a19c-1cf508cbfda7":{"id_":"7616d5e7-6913-483c-a19c-1cf508cbfda7","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"a02fb9b6-f315-4fb5-90af-925caeed4e39","metadata":{},"hash":"2xlb9btmFuo6tX0f95XHSQku/TcwVafyA1TOpzv84uw="},"NEXT":{"nodeId":"254f332c-1aec-4c31-9a3a-3cc71356e0cc","metadata":{},"hash":"2YXdSE/JE7tzrWLy9yEqyAvkbtjKkU7qt2gU5nfX7rU="}},"text":"So governments that forbid you to accumulate wealth are in effect decreeing that you work slowly.They're willing to let you earn $3 million over fifty years, but they're not willing to let you work so hard that you can do it in two.They are like the corporate boss that you can't go to and say, I want to work ten times as hard, so please pay me ten times a much.Except this is not a boss you can escape by starting your own company.The problem with working slowly is not just that technical innovation happens slowly.It's that it tends not to happen at all.It's only when you're deliberately looking for hard problems, as a way to use speed to the greatest advantage, that you take on this kind of project.Developing new technology is a pain in the ass.It is, as Edison said, one percent inspiration and ninety-nine percent perspiration.Without the incentive of wealth, no one wants to do it.Engineers will work on sexy projects like fighter planes and moon rockets for ordinary salaries, but more mundane technologies like light bulbs or semiconductors have to be developed by entrepreneurs.Startups are not just something that happened in Silicon Valley in the last couple decades.Since it became possible to get rich by creating wealth, everyone who has done it has used essentially the same recipe: measurement and leverage, where measurement comes from working with a small group, and leverage from developing new techniques.The recipe was the same in Florence in 1200 as it is in Santa Clara today.Understanding this may help to answer an important question: why Europe grew so powerful.Was it something about the geography of Europe?Was it that Europeans are somehow racially superior?Was it their religion?The answer (or at least the proximate cause) may be that the Europeans rode on the crest of a powerful new idea: allowing those who made a lot of money to keep it.Once you're allowed to do that, people who want to get rich can do it by generating wealth instead of stealing it.The resulting technological growth translates not only into wealth but into military power.The theory that led to the stealth plane was developed by a Soviet mathematician.But because the Soviet Union didn't have a computer industry, it remained for them a theory; they didn't have hardware capable of executing the calculations fast enough to design an actual airplane.In that respect the Cold War teaches the same lesson as World War II and, for that matter, most wars in recent history.Don't let a ruling class of warriors and politicians squash the entrepreneurs.The same recipe that makes individuals rich makes countries powerful.Let the nerds keep their lunch money, and you rule the world.Notes\r\n\r\n[1] One valuable thing you tend to get only in startups is uninterruptability.Different kinds of work have different time quanta.Someone proofreading a manuscript could probably be interrupted every fifteen minutes with little loss of productivity.But the time quantum for hacking is very long: it might take an hour just to load a problem into your head.So the cost of having someone from personnel call you about a form you forgot to fill out can be huge.This is why hackers give you such a baleful stare as they turn from their screen to answer your question.Inside their heads a giant house of cards is tottering.The mere possibility of being interrupted deters hackers from starting hard projects.This is why they tend to work late at night, and why it's next to impossible to write great software in a cubicle (except late at night).One great advantage of startups is that they don't yet have any of the people who interrupt you.There is no personnel department, and thus no form nor anyone to call you about it.[2] Faced with the idea that people working for startups might be 20 or 30 times as productive as those working for large companies, executives at large companies will naturally wonder, how could I get the people working for me to do that?The answer is simple: pay them to.Internally most companies are run like Communist states.If you believe in free markets, why not turn your company into one?Hypothesis: A company will be maximally profitable when each employee is paid in proportion to the wealth they generate.[3] Until recently even governments sometimes didn't grasp the distinction between money and wealth.Adam Smith (Wealth of Nations, v:i) mentions several that tried to preserve their \"wealth\" by forbidding the export of gold or silver.But having more of the medium of exchange would not make a country richer; if you have more money chasing the same amount of material wealth, the only result is higher prices.[4] There are many senses of the word \"wealth,\" not all of them material.I'm not trying to make a deep philosophical point here about which is the true kind.I'm writing about one specific, rather technical sense of the word \"wealth.\"What people will give you money for.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"NJbMYTgdIcjoIsrU+M32ji0CwY/a4J6tGVzVZEwOXOk="},"254f332c-1aec-4c31-9a3a-3cc71356e0cc":{"id_":"254f332c-1aec-4c31-9a3a-3cc71356e0cc","metadata":{},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"essay","metadata":{},"hash":"mxibtADFd8/xOtLNHAl5P5TbQI8EmxTslYOObhT9HpE="},"PREVIOUS":{"nodeId":"7616d5e7-6913-483c-a19c-1cf508cbfda7","metadata":{},"hash":"NJbMYTgdIcjoIsrU+M32ji0CwY/a4J6tGVzVZEwOXOk="}},"text":"Internally most companies are run like Communist states.If you believe in free markets, why not turn your company into one?Hypothesis: A company will be maximally profitable when each employee is paid in proportion to the wealth they generate.[3] Until recently even governments sometimes didn't grasp the distinction between money and wealth.Adam Smith (Wealth of Nations, v:i) mentions several that tried to preserve their \"wealth\" by forbidding the export of gold or silver.But having more of the medium of exchange would not make a country richer; if you have more money chasing the same amount of material wealth, the only result is higher prices.[4] There are many senses of the word \"wealth,\" not all of them material.I'm not trying to make a deep philosophical point here about which is the true kind.I'm writing about one specific, rather technical sense of the word \"wealth.\"What people will give you money for.This is an interesting sort of wealth to study, because it is the kind that prevents you from starving.And what people will give you money for depends on them, not you.When you're starting a business, it's easy to slide into thinking that customers want what you do.During the Internet Bubble I talked to a woman who, because she liked the outdoors, was starting an \"outdoor portal.\"You know what kind of business you should start if you like the outdoors?One to recover data from crashed hard disks.What's the connection?None at all.Which is precisely my point.If you want to create wealth (in the narrow technical sense of not starving) then you should be especially skeptical about any plan that centers on things you like doing.That is where your idea of what's valuable is least likely to coincide with other people's.[5] In the average car restoration you probably do make everyone else microscopically poorer, by doing a small amount of damage to the environment.While environmental costs should be taken into account, they don't make wealth a zero-sum game.For example, if you repair a machine that's broken because a part has come unscrewed, you create wealth with no environmental cost.[5b] This essay was written before Firefox.[6] Many people feel confused and depressed in their early twenties.Life seemed so much more fun in college.Well, of course it was.Don't be fooled by the surface similarities.You've gone from guest to servant.It's possible to have fun in this new world.Among other things, you now get to go behind the doors that say \"authorized personnel only.\"But the change is a shock at first, and all the worse if you're not consciously aware of it.[7] When VCs asked us how long it would take another startup to duplicate our software, we used to reply that they probably wouldn't be able to at all.I think this made us seem naive, or liars.[8] Few technologies have one clear inventor.So as a rule, if you know the \"inventor\" of something (the telephone, the assembly line, the airplane, the light bulb, the transistor) it is because their company made money from it, and the company's PR people worked hard to spread the story.If you don't know who invented something (the automobile, the television, the computer, the jet engine, the laser), it's because other companies made all the money.[9] This is a good plan for life in general.If you have two choices, choose the harder.If you're trying to decide whether to go out running or sit home and watch TV, go running.Probably the reason this trick works so well is that when you have two choices and one is harder, the only reason you're even considering the other is laziness.You know in the back of your mind what's the right thing to do, and this trick merely forces you to acknowledge it.[10] It is probably no accident that the middle class first appeared in northern Italy and the low countries, where there were no strong central governments.These two regions were the richest of their time and became the twin centers from which Renaissance civilization radiated.If they no longer play that role, it is because other places, like the United States, have been truer to the principles they discovered.[11] It may indeed be a sufficient condition.But if so, why didn't the Industrial Revolution happen earlier?Two possible (and not incompatible) answers: (a) It did.The Industrial Revolution was one in a series.(b) Because in medieval towns, monopolies and guild regulations initially slowed the development of new means of production.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"2YXdSE/JE7tzrWLy9yEqyAvkbtjKkU7qt2gU5nfX7rU="}},"type":"simple_dict"}}}